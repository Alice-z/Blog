[{"_id":"5a01faa18c441664b2f7f4cd","title":"Mac环境查看及杀死进程命令","info":"<p><span style=\"color: rgb(209, 154, 102);\">1.</span> <span style=\"color: rgb(171, 178, 191);\">查看端口被哪个程序占用</span></p><p class=\"ql-indent-1\"><span style=\"color: rgb(171, 178, 191);\">sudo</span> <span style=\"color: rgb(171, 178, 191);\">lsof</span> <span style=\"color: rgb(86, 182, 194);\">-</span><span style=\"color: rgb(171, 178, 191);\">i</span> <span style=\"color: rgb(171, 178, 191);\">tcp</span>:<span style=\"color: rgb(171, 178, 191);\">port</span></p><p class=\"ql-indent-1\"><span style=\"color: rgb(171, 178, 191);\">如</span>：<span style=\"color: rgb(171, 178, 191);\">sudo</span> <span style=\"color: rgb(171, 178, 191);\">lsof</span> <span style=\"color: rgb(86, 182, 194);\">-</span><span style=\"color: rgb(171, 178, 191);\">i</span> <span style=\"color: rgb(171, 178, 191);\">tcp</span>:<span style=\"color: rgb(209, 154, 102);\">8080</span></p><p><span style=\"color: rgb(209, 154, 102);\">2.</span> <span style=\"color: rgb(171, 178, 191);\">看到进程的PID</span>，<span style=\"color: rgb(171, 178, 191);\">可以将进程杀死</span>。</p><p class=\"ql-indent-1\"><span style=\"color: rgb(171, 178, 191);\">sudo</span> <span style=\"color: rgb(171, 178, 191);\">kill</span> <span style=\"color: rgb(86, 182, 194);\">-</span><span style=\"color: rgb(209, 154, 102);\">9</span> <span style=\"color: rgb(209, 154, 102);\">PID</span></p><p class=\"ql-indent-1\"><span style=\"color: rgb(171, 178, 191);\">如</span>：<span style=\"color: rgb(171, 178, 191);\">sudo</span> <span style=\"color: rgb(171, 178, 191);\">kill</span> <span style=\"color: rgb(86, 182, 194);\">-</span><span style=\"color: rgb(209, 154, 102);\">9</span> <span style=\"color: rgb(209, 154, 102);\">750</span></p><p><br></p><p><br></p>","sort":"mac","__v":0,"time":"1510069715608"},{"_id":"5a031a3de47da588047c1935","title":"node path模块","info":"<p><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path.basename()</code>&nbsp;方法返回一个&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;的最后一部分，类似于 Unix 中的&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">basename</code>&nbsp;命令。 Trailing directory separators are ignored, see&nbsp;<code style=\"background-color: inherit; color: inherit;\"><a href=\"http://nodejs.cn/api/path.html#path_path_sep\" target=\"_blank\">path.sep</a></code>.</p><p>例子：</p><pre class=\"ql-syntax\" spellcheck=\"false\">path.basename(<span class=\"hljs-string\">'/foo/bar/baz/asdf/quux.html'</span>);\n<span class=\"hljs-regexp\">//</span> 返回: <span class=\"hljs-string\">'quux.html'</span>\n\npath.basename(<span class=\"hljs-string\">'/foo/bar/baz/asdf/quux.html'</span>, <span class=\"hljs-string\">'.html'</span>);\n<span class=\"hljs-regexp\">//</span> 返回: <span class=\"hljs-string\">'quux'</span>\n</pre><p>如果&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;不是一个字符串或提供了&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">ext</code>&nbsp;但不是一个字符串，则抛出&nbsp;<code style=\"background-color: inherit; color: inherit;\"><a href=\"http://nodejs.cn/api/errors.html#errors_class_typeerror\" target=\"_blank\">TypeError</a></code>。</p><p><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path.dirname()</code>&nbsp;方法返回一个&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;的目录名，类似于 Unix 中的&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">dirname</code>&nbsp;命令。 Trailing directory separators are ignored, see&nbsp;<code style=\"background-color: inherit; color: inherit;\"><a href=\"http://nodejs.cn/api/path.html#path_path_sep\" target=\"_blank\">path.sep</a></code>.</p><p>例子：</p><pre class=\"ql-syntax\" spellcheck=\"false\">path.dirname(<span class=\"hljs-string\">'/foo/bar/baz/asdf/quux'</span>);\n<span class=\"hljs-regexp\">//</span> 返回: <span class=\"hljs-string\">'/foo/bar/baz/asdf'</span>\n</pre><p>如果&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;不是一个字符串，则抛出&nbsp;<code style=\"background-color: inherit; color: inherit;\"><a href=\"http://nodejs.cn/api/errors.html#errors_class_typeerror\" target=\"_blank\">TypeError</a></code>。</p><p><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path.extname()</code>&nbsp;方法返回&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;的扩展名，即从&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;的最后一部分中的最后一个&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">.</code>（句号）字符到字符串结束。 如果&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;的最后一部分没有&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">.</code>&nbsp;或&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;的文件名（见&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path.basename()</code>）的第一个字符是&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">.</code>，则返回一个空字符串。</p><p>例子：</p><pre class=\"ql-syntax\" spellcheck=\"false\">path.extname(<span class=\"hljs-string\">'index.html'</span>);\n<span class=\"hljs-regexp\">//</span> 返回: <span class=\"hljs-string\">'.html'</span>\n\npath.extname(<span class=\"hljs-string\">'index.coffee.md'</span>);\n<span class=\"hljs-regexp\">//</span> 返回: <span class=\"hljs-string\">'.md'</span>\n\npath.extname(<span class=\"hljs-string\">'index.'</span>);\n<span class=\"hljs-regexp\">//</span> 返回: <span class=\"hljs-string\">'.'</span>\n\npath.extname(<span class=\"hljs-string\">'index'</span>);\n<span class=\"hljs-regexp\">//</span> 返回: <span class=\"hljs-string\">''</span>\n\npath.extname(<span class=\"hljs-string\">'.index'</span>);\n<span class=\"hljs-regexp\">//</span> 返回: <span class=\"hljs-string\">''</span>\n</pre><p>如果&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;不是一个字符串，则抛出&nbsp;<code style=\"background-color: inherit; color: inherit;\"><a href=\"http://nodejs.cn/api/errors.html#errors_class_typeerror\" target=\"_blank\">TypeError</a></code>。</p><h2><strong>path.isAbsolute(path)</strong></h2><h2><br></h2><ul><li><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" target=\"_blank\" style=\"color: rgb(67, 133, 61);\">&lt;string&gt;</a></li><li>返回:&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" target=\"_blank\" style=\"color: rgb(67, 133, 61);\">&lt;boolean&gt;</a></li></ul><p><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path.isAbsolute()</code>&nbsp;方法会判定&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;是否为一个绝对路径。</p><p>如果给定的&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;是一个长度为零的字符串，则返回&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">false</code>。</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">path.isAbsolute(<span class=\"hljs-string\">'/foo/bar'</span>); <span class=\"hljs-regexp\">//</span> <span class=\"hljs-literal\">true</span>\npath.isAbsolute(<span class=\"hljs-string\">'/baz/..'</span>);  <span class=\"hljs-regexp\">//</span> <span class=\"hljs-literal\">true</span>\npath.isAbsolute(<span class=\"hljs-string\">'qux/'</span>);     <span class=\"hljs-regexp\">//</span> <span class=\"hljs-literal\">false</span>\npath.isAbsolute(<span class=\"hljs-string\">'.'</span>);        <span class=\"hljs-regexp\">//</span> <span class=\"hljs-literal\">false</span>\n</pre><p><br></p><p><br></p><h2><strong>path.join([...paths])</strong></h2><h2><br></h2><h2><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">...paths</code>&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" target=\"_blank\" style=\"color: rgb(67, 133, 61);\">&lt;string&gt;</a>&nbsp;一个路径片段的序列</h2><ul><li>返回:&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" target=\"_blank\" style=\"color: rgb(67, 133, 61);\">&lt;string&gt;</a></li></ul><p><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path.join()</code>&nbsp;方法使用平台特定的分隔符把全部给定的&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;片段连接到一起，并规范化生成的路径。</p><p>长度为零的&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;片段会被忽略。 如果连接后的路径字符串是一个长度为零的字符串，则返回&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">'.'</code>，表示当前工作目录。</p><p>例子：</p><pre class=\"ql-syntax\" spellcheck=\"false\">path.join(<span class=\"hljs-string\">'/foo'</span>, <span class=\"hljs-string\">'bar'</span>, <span class=\"hljs-string\">'baz/asdf'</span>, <span class=\"hljs-string\">'quux'</span>, <span class=\"hljs-string\">'..'</span>);\n<span class=\"hljs-regexp\">//</span> 返回: <span class=\"hljs-string\">'/foo/bar/baz/asdf'</span>\n\npath.join(<span class=\"hljs-string\">'foo'</span>, {}, <span class=\"hljs-string\">'bar'</span>);\n<span class=\"hljs-regexp\">//</span> 抛出 <span class=\"hljs-string\">'TypeError: Path must be a string. Received {}'</span>\n</pre><p>如果任一路径片段不是一个字符串，则抛出&nbsp;<code style=\"background-color: inherit; color: inherit;\"><a href=\"http://nodejs.cn/api/errors.html#errors_class_typeerror\" target=\"_blank\">TypeError</a></code>。</p><p><br></p><h2><strong>path.parse(path)</strong></h2><h2><a href=\"http://nodejs.cn/api/path.html#path_path_parse_path\" target=\"_blank\" style=\"color: rgb(112, 112, 112);\"><strong>#</strong></a></h2><ul><li><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" target=\"_blank\" style=\"color: rgb(67, 133, 61);\">&lt;string&gt;</a></li><li>返回:&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" style=\"color: rgb(67, 133, 61);\">&lt;Object&gt;</a></li></ul><p><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path.parse()</code>&nbsp;方法返回一个对象，对象的属性表示&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;的元素。 Trailing directory separators are ignored, see&nbsp;<code style=\"background-color: inherit; color: inherit;\"><a href=\"http://nodejs.cn/api/path.html#path_path_sep\" target=\"_blank\">path.sep</a></code>.</p><p>返回的对象有以下属性：</p><ul><li><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">dir</code>&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" target=\"_blank\" style=\"color: rgb(67, 133, 61);\">&lt;string&gt;</a></li><li><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">root</code>&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" target=\"_blank\" style=\"color: rgb(67, 133, 61);\">&lt;string&gt;</a></li><li><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">base</code>&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" target=\"_blank\" style=\"color: rgb(67, 133, 61);\">&lt;string&gt;</a></li><li><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">name</code>&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" target=\"_blank\" style=\"color: rgb(67, 133, 61);\">&lt;string&gt;</a></li><li><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">ext</code>&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" target=\"_blank\" style=\"color: rgb(67, 133, 61);\">&lt;string&gt;</a></li></ul><p>例如，在 POSIX 上：</p><pre class=\"ql-syntax\" spellcheck=\"false\">path.parse(<span class=\"hljs-string\">'/home/user/dir/file.txt'</span>);\n<span class=\"hljs-regexp\">//</span> 返回:\n<span class=\"hljs-regexp\">//</span> { <span class=\"hljs-symbol\">root:</span> <span class=\"hljs-string\">'/'</span>,\n<span class=\"hljs-regexp\">//</span>   <span class=\"hljs-symbol\">dir:</span> <span class=\"hljs-string\">'/home/user/dir'</span>,\n<span class=\"hljs-regexp\">//</span>   <span class=\"hljs-symbol\">base:</span> <span class=\"hljs-string\">'file.txt'</span>,\n<span class=\"hljs-regexp\">//</span>   <span class=\"hljs-symbol\">ext:</span> <span class=\"hljs-string\">'.txt'</span>,\n<span class=\"hljs-regexp\">//</span>   <span class=\"hljs-symbol\">name:</span> <span class=\"hljs-string\">'file'</span> }\n</pre><p><br></p><h2><strong>path.relative(from, to)</strong></h2><h2><a href=\"http://nodejs.cn/api/path.html#path_path_relative_from_to\" target=\"_blank\" style=\"color: rgb(112, 112, 112);\"><strong>#</strong></a></h2><p>版本历史</p><ul><li><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">from</code>&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" target=\"_blank\" style=\"color: rgb(67, 133, 61);\">&lt;string&gt;</a></li><li><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">to</code>&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" target=\"_blank\" style=\"color: rgb(67, 133, 61);\">&lt;string&gt;</a></li><li>返回:&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" target=\"_blank\" style=\"color: rgb(67, 133, 61);\">&lt;string&gt;</a></li></ul><p><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path.relative()</code>&nbsp;方法返回从&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">from</code>&nbsp;到&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">to</code>&nbsp;的相对路径（基于当前工作目录）。 如果&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">from</code>&nbsp;和&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">to</code>&nbsp;各自解析到同一路径（调用&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path.resolve()</code>），则返回一个长度为零的字符串。</p><p>如果&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">from</code>&nbsp;或&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">to</code>&nbsp;传入了一个长度为零的字符串，则当前工作目录会被用于代替长度为零的字符串。</p><p>例如，在 POSIX 上：</p><pre class=\"ql-syntax\" spellcheck=\"false\">path.relative(<span class=\"hljs-string\">'/data/orandea/test/aaa'</span>, <span class=\"hljs-string\">'/data/orandea/impl/bbb'</span>);\n<span class=\"hljs-regexp\">//</span> 返回: <span class=\"hljs-string\">'../../impl/bbb'</span>\n</pre><p><br></p><h2><strong>path.resolve([...paths])</strong></h2><h2><a href=\"http://nodejs.cn/api/path.html#path_path_resolve_paths\" target=\"_blank\" style=\"color: rgb(112, 112, 112);\"><strong>#</strong></a></h2><ul><li><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">...paths</code>&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" target=\"_blank\" style=\"color: rgb(67, 133, 61);\">&lt;string&gt;</a>&nbsp;一个路径或路径片段的序列</li><li>返回:&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" target=\"_blank\" style=\"color: rgb(67, 133, 61);\">&lt;string&gt;</a></li></ul><p><code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path.resolve()</code>&nbsp;方法会把一个路径或路径片段的序列解析为一个绝对路径。</p><p>给定的路径的序列是从右往左被处理的，后面每个&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;被依次解析，直到构造完成一个绝对路径。 例如，给定的路径片段的序列为：<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">/foo</code>、<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">/bar</code>、<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">baz</code>，则调用&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path.resolve('/foo', '/bar', 'baz')</code>&nbsp;会返回&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">/bar/baz</code>。</p><p>如果处理完全部给定的&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;片段后还未生成一个绝对路径，则当前工作目录会被用上。</p><p>生成的路径是规范化后的，且末尾的斜杠会被删除，除非路径被解析为根目录。</p><p>长度为零的&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;片段会被忽略。</p><p>如果没有传入&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path</code>&nbsp;片段，则&nbsp;<code style=\"background-color: rgb(242, 242, 242); color: rgb(4, 4, 4);\">path.resolve()</code>&nbsp;会返回当前工作目录的绝对路径。</p><p>例子：</p><pre class=\"ql-syntax\" spellcheck=\"false\">path.resolve(<span class=\"hljs-string\">'/foo/bar'</span>, <span class=\"hljs-string\">'./baz'</span>);\n<span class=\"hljs-regexp\">//</span> 返回: <span class=\"hljs-string\">'/foo/bar/baz'</span>\n\npath.resolve(<span class=\"hljs-string\">'/foo/bar'</span>, <span class=\"hljs-string\">'/tmp/file/'</span>);\n<span class=\"hljs-regexp\">//</span> 返回: <span class=\"hljs-string\">'/tmp/file'</span>\n\npath.resolve(<span class=\"hljs-string\">'wwwroot'</span>, <span class=\"hljs-string\">'static_files/png/'</span>, <span class=\"hljs-string\">'../gif/image.gif'</span>);\n<span class=\"hljs-regexp\">//</span> 如果当前工作目录为 /home/myself/node，\n/<span class=\"hljs-regexp\">/ 则返回 '/home/myself/node/wwwroot/static</span>_files/gif/image.gif<span class=\"hljs-string\">'\n</span></pre><p>如果任何参数不是一个字符串，则抛出&nbsp;<code style=\"background-color: inherit; color: inherit;\"><a href=\"http://nodejs.cn/api/errors.html#errors_class_typeerror\" target=\"_blank\">TypeError</a></code>。</p><p><br></p>","sort":"node","__v":0,"time":"1510150212558"}]