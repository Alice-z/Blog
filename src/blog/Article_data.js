export default [{"info":"<h2 style=\"color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"></h2><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-weight: 700;\"><br/></span></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">知道了Vue服务端渲染的大致流程，那怎么用代码来实现呢?</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p><section><section><section><section><section></section></section><section><p style=\"line-height: 2.27rem;\">1. 创建一个 vue 实例</p><p style=\"line-height: 2.27rem;\">2. 配置路由，以及相应的视图组件</p><p style=\"line-height: 2.27rem;\">3. 使用 vuex 管理数据</p><p style=\"line-height: 2.27rem;\">4. 创建服务端入口文件</p><p style=\"line-height: 2.27rem;\">5. 创建客户端入口文件</p><p style=\"line-height: 2.27rem;\">6. 配置 webpack，分服务端打包配置和客户端打包配置</p><p style=\"line-height: 2.27rem;\">7. 创建服务器端的渲染器，将vue实例渲染成html</p></section><section><section></section><section></section></section></section></section></section></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><ul style=\"padding: 0px 0px 0px 2.7rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"line-height: 2.27rem;\">首先我们来创建一个 vue 实例</p></li></ul><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs python\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\">// app.js<br/><br/> &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> Vue <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;vue&#39;</span>;<br/> &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> router <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./router&#39;</span>;<br/> &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> store <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./store&#39;</span>;<br/> &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> App <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./components/app&#39;</span>; &nbsp; <br/><br/> &nbsp; &nbsp;let app = new Vue({<br/> &nbsp; &nbsp; &nbsp; &nbsp;template: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;&lt;app&gt;&lt;/app&gt;&#39;</span>，<br/> &nbsp; &nbsp; &nbsp; &nbsp;base: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;/c/&#39;</span>，<br/> &nbsp; &nbsp; &nbsp; &nbsp;components: {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;App<br/> &nbsp; &nbsp; &nbsp; &nbsp;}，<br/> &nbsp; &nbsp; &nbsp; &nbsp;router，<br/> &nbsp; &nbsp; &nbsp; &nbsp;store<br/> &nbsp; &nbsp;});<br/><br/> &nbsp; &nbsp;export {<br/> &nbsp; &nbsp; &nbsp; &nbsp;app，<br/> &nbsp; &nbsp; &nbsp; &nbsp;router，<br/> &nbsp; &nbsp; &nbsp; &nbsp;store<br/> &nbsp; &nbsp;}</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">和我们以前写的vue实例差别不大，但是我们不会在这里将app mount到DOM上，因为这个实例也会在服务端去运行，这里直接将 app 暴露出去。</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><ul style=\"padding: 0px 0px 0px 2.7rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"line-height: 2.27rem;\">配置 vue 路由<br/></p></li></ul><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs javascript\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\"> &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> Vue <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;vue&#39;</span>;<br/> &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> VueRouter <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;vue-router&#39;</span>;<br/><br/> &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> IndexView <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;../views/indexView&#39;</span>;<br/> &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> ArticleItems <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;../views/articleItems&#39;</span>;<br/><br/> &nbsp;Vue.use(VueRouter);<br/><br/> &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">const</span> router = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> VueRouter({<br/> &nbsp; &nbsp; &nbsp;mode: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;history&#39;</span>，<br/> &nbsp; &nbsp; &nbsp;base: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;/c/&#39;</span>，<br/> &nbsp; &nbsp; &nbsp;routes: [<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;path: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;/:alias&#39;</span>，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;component: IndexView<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}， {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;path: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;/:alias/list&#39;</span>，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;component: ArticleItems<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br/> &nbsp; &nbsp; &nbsp;]<br/> &nbsp;});</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">注意这里的 base，在服务端传递 path 给 vue-router 的时候要注意去掉前面的 &#39;/c/&#39;，否则会匹配不到。</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><ul style=\"padding: 0px 0px 0px 2.7rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"line-height: 2.27rem;\">创建视图组件，这里我们使用单文件组件，下面是 indexView.vue 文件的实例代码</p></li></ul><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs xml\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\"><span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br/> &nbsp; &nbsp; &nbsp;<span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\" style=\"color: teal;\">class</span>=<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&quot;content&quot;</span>&gt;</span><br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-name\">course-cover</span> <span class=\"hljs-attr\" style=\"color: teal;\">:class-data</span>=<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&quot;classData[0]&quot;</span>&gt;</span><span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-name\">course-cover</span>&gt;</span><br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-name\">article-items</span> <span class=\"hljs-attr\" style=\"color: teal;\">:article-items</span>=<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&quot;articleItems&quot;</span>&gt;</span><span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-name\">article-items</span>&gt;</span><br/> &nbsp; &nbsp; &nbsp;<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br/> &nbsp;<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br/><br/> &nbsp;<span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> courseCover <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;../components/courseCover.vue&#39;</span>;</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> articleItems <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;../components/articleItems&#39;</span>;</span><br/><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">export</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">default</span> {</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;computed: {</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;classData() {</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">this</span>.$store.state.courseListItems;</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;articleItems() {</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">this</span>.$store.state.articleItems;</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;components: {</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;courseCover，</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;articleItems</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\">// 服务端获取数据</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fetchServerData ({ state， dispatch， commit }) {</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;let alias = state.route.params.alias;</span></span><br/><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return Promise.all([</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dispatch(&#39;FETCH_ZT&#39;， { alias })，</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dispatch(&#39;FETCH_COURSE_ITEMS&#39;)，</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dispatch(&#39;FETCH_ARTICLE_ITEMS&#39;)</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;])</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 客户端获取数据</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;beforeMount() {</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return this.$store.dispatch(&#39;FETCH_COURSE_ITEMS&#39;);</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp;}</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp;</span></span><span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">这里我们暴露一个 fetchServerData 方法用来在服务端渲染时做数据的预加载，具体在哪调用，下面会讲到。 beforeMount 是vue的生命周期钩子函数，当应用在客户端切换到这个视图的时候会在特定的时候去执行，用于在客户端获取数据。</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><ul style=\"padding: 0px 0px 0px 2.7rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"line-height: 2.27rem;\">使用 vuex 管理数据，vue2.0 的服务端官方推荐使用&nbsp;<a style=\"background-color: transparent; cursor: pointer; color: rgb(34, 85, 153);\">STORE</a>&nbsp;来管理数据，和1.0相比 api 有一些调整</p></li></ul><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs coffeescript\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\"> &nbsp;import Vue from <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;vue&#39;</span>;<br/> &nbsp;import Vuex from <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;vuex&#39;</span>;<br/> &nbsp;import axios from <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;axios&#39;</span>;<br/><br/> &nbsp;Vue.use(Vuex);<br/><br/> &nbsp;let apiHost = <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;http://localhost:3000&#39;</span>;<br/><br/> &nbsp;const store = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> Vuex.Store({<br/> &nbsp; &nbsp; &nbsp;state: {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;alias: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;&#39;</span>，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ztData: {}，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;courseListItems: []，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;articleItems: []<br/> &nbsp; &nbsp; &nbsp;}，<br/> &nbsp; &nbsp; &nbsp;actions: {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FETCH_ZT: <span class=\"hljs-function\"><span class=\"hljs-params\">({ commit， dispatch， state }， { alias })</span> = {</span><br/><span class=\"hljs-function\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;commit<span class=\"hljs-params\">(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;SET_ALIAS&#39;</span>， { alias })</span>;</span><br/><span class=\"hljs-function\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return axios.get<span class=\"hljs-params\">(`<span class=\"javascript\">${apiHost}/api/zt</span>`)</span></span><br/><span class=\"hljs-function\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.then<span class=\"hljs-params\">(response =&gt; {</span></span><br/><span class=\"hljs-function\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;let data = response.data || {};</span><br/><span class=\"hljs-function\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;commit(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;SET_ZT_DATA&#39;</span>， data);</span><br/><span class=\"hljs-function\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;})</span><br/><span class=\"hljs-function\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，</span><br/><span class=\"hljs-function\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FETCH_COURSE_ITEMS: <span class=\"hljs-params\">({ commit， dispatch， state })</span> =&gt;</span> {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> axios.get(`<span class=\"javascript\">${apiHost}/api/course_items</span>`).<span class=\"hljs-keyword\" style=\"font-weight: 700;\">then</span>(response =&gt; {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;let data = response.data;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;commit(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;SET_COURSE_ITEMS&#39;</span>， data);<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;});<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FETCH_ARTICLE_ITEMS: <span class=\"hljs-function\"><span class=\"hljs-params\">({ commit， dispatch， state })</span> =&gt;</span> {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> axios.get(`<span class=\"javascript\">${apiHost}/api/article_items</span>`)<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.<span class=\"hljs-keyword\" style=\"font-weight: 700;\">then</span>(response =&gt; {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;let data = response.data;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;commit(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;SET_ARTICLE_ITEMS&#39;</span>， data);<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;})<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br/> &nbsp; &nbsp; &nbsp;}，<br/> &nbsp; &nbsp; &nbsp;mutations: {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SET_COURSE_ITEMS: <span class=\"hljs-function\"><span class=\"hljs-params\">(state， data)</span> =&gt;</span> {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;state.courseListItems = data;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SET_ALIAS: <span class=\"hljs-function\"><span class=\"hljs-params\">(state， { alias })</span> =&gt;</span> {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;state.alias = alias;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SET_ZT_DATA: <span class=\"hljs-function\"><span class=\"hljs-params\">(state， { ztData })</span> =&gt;</span> {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;state.ztData = ztData;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SET_ARTICLE_ITEMS: <span class=\"hljs-function\"><span class=\"hljs-params\">(state， items)</span> =&gt;</span> {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;state.articleItems = items;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br/> &nbsp; &nbsp; &nbsp;}<br/> &nbsp;})<br/><br/> &nbsp;export default store;</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">state 使我们应用层的数据，相当于一个仓库，整个应用层的数据都存在这里，与不使用vuex的vue应用有两点不同：<br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p><section><section><section><section><p style=\"line-height: 2.27rem;\">- &nbsp;Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p><p style=\"line-height: 2.27rem;\">- &nbsp;Vuex 不允许我们直接对 store 中的数据进行操作。改变 store 中的状态的唯一途径就是显式地提交(commit) mutations。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</p></section><section><section></section><section></section></section></section></section></section></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">action 响应在view上的用户输入导致的状态变化，并不直接操作数据，异步的逻辑都封装在这里执行，它最终的目的是提交 mutation 来操作数据。 mutation vuex 中修改store 数据的唯一方法，使用 commit 来提交。</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><ul style=\"padding: 0px 0px 0px 2.7rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"line-height: 2.27rem;\">创建服务端的入口文件 server-entry.js</p></li></ul><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs coffeescript\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\"><span class=\"hljs-regexp\" style=\"color: rgb(0, 153, 38);\">//</span> server-entry.js<br/> &nbsp; &nbsp;import {app， router， store} from <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./app&#39;</span>;<br/><br/> &nbsp; &nbsp;export default context =&gt; {<br/><br/> &nbsp; &nbsp; &nbsp; &nbsp;const s = Date.now();<br/> &nbsp; &nbsp; &nbsp; &nbsp;router.push(context.url);<br/> &nbsp; &nbsp; &nbsp; &nbsp;const matchedComponents = router.getMatchedComponents();<br/> &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">if</span>(!matchedComponents) {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> Promise.reject({ code: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;404&#39;</span> });<br/> &nbsp; &nbsp; &nbsp; &nbsp;}<br/><br/> &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> Promise.all(<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;matchedComponents.map(component =&gt; {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">if</span>(component.fetchServerData) {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> component.fetchServerData(store);<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;})<br/> &nbsp; &nbsp; &nbsp; &nbsp;).<span class=\"hljs-keyword\" style=\"font-weight: 700;\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;context.initialState = store.state;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> app;<br/> &nbsp; &nbsp; &nbsp; &nbsp;})<br/> &nbsp; &nbsp;}</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">server.js 返回一个函数，该函数接受一个从服务端传递过来的 context 的参数，将 vue 实例通过 promise 返回。 context 一般包含 当前页面的url，首先我们调用 vue-router 的 router.push(url) 切换到到对应的路由， 然后调用 getMatchedComponents 方法返回对应要渲染的组件， 这里会检查组件是否有 fetchServerData 方法，如果有就会执行它。</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">下面这行代码将服务端获取到的数据挂载到 context 对象上，后面会把这些数据直接发送到浏览器端与客户端的vue 实例进行数据(状态)同步。</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\">`context.initialState&nbsp;=&nbsp;store.state`</pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">创建客户端入口文件 client-entry.js</p><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs python\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\">// client-entry.js<br/> &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> { app， store } <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./app&#39;</span>;<br/> &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./main.scss&#39;</span>;<br/> &nbsp; &nbsp;store.replaceState(window.__INITIAL_STATE__);<br/> &nbsp; &nbsp;app.$mount(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;#app&#39;</span>);</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">客户端入口文件很简单，同步服务端发送过来的数据，然后把 vue 实例挂载到服务端渲染的 DOM 上。</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><ul style=\"padding: 0px 0px 0px 2.7rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"line-height: 2.27rem;\">配置 webpack</p></li></ul><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs coffeescript\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\"><span class=\"hljs-regexp\" style=\"color: rgb(0, 153, 38);\">//</span> webpack.server.config.js<br/> &nbsp; &nbsp;const base = <span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">require</span>(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./webpack.base.config&#39;</span>); <span class=\"hljs-regexp\" style=\"color: rgb(0, 153, 38);\">//</span> webpack 的通用配置<br/> &nbsp; &nbsp;<span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">module</span>.exports = Object.assign({}， base， {<br/> &nbsp; &nbsp; &nbsp; &nbsp;target: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;node&#39;</span>，<br/> &nbsp; &nbsp; &nbsp; &nbsp;entry: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./src/server-entry.js&#39;</span>，<br/> &nbsp; &nbsp; &nbsp; &nbsp;output: {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;filename: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;server-bundle.js&#39;</span>，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;libraryTarget: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;commonjs2&#39;</span><br/> &nbsp; &nbsp; &nbsp; &nbsp;}，<br/> &nbsp; &nbsp; &nbsp; &nbsp;externals: Object.keys(<span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">require</span>(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;../package.json&#39;</span>).dependencies)，<br/> &nbsp; &nbsp; &nbsp; &nbsp;plugins: [<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> webpack.DefinePlugin({<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;process.env.NODE_ENV&#39;</span>: JSON.stringify(process.env.NODE_ENV || <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;development&#39;</span>)，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;process.env.VUE_ENV&#39;</span>: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;&quot;server&quot;&#39;</span><br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;})<br/> &nbsp; &nbsp; &nbsp; &nbsp;]<br/> &nbsp; &nbsp;})</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">注意这里添加了&nbsp;target: &#39;node&#39;&nbsp;和&nbsp;libraryTarget: &#39;commonjs2&#39;，然后入口文件改成我们的 server-entry.js， 客户端的 webpack 和以前一样，这里就不贴了。</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><ul style=\"padding: 0px 0px 0px 2.7rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"line-height: 2.27rem;\">分别打包服务端代码和客户端代码</p></li></ul><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">因为有两个 webpack 配置文件，执行 webpack 时候就需要指定 --config 参数来编译不同的 bundle。 我们可以配置两个 npm script</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs css\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\"> &nbsp; &nbsp;&quot;<span class=\"hljs-selector-tag\" style=\"font-weight: 700;\">packclient</span>&quot;: &quot;<span class=\"hljs-selector-tag\" style=\"font-weight: 700;\">webpack</span> <span class=\"hljs-selector-tag\" style=\"font-weight: 700;\">--config</span> <span class=\"hljs-selector-tag\" style=\"font-weight: 700;\">webpack</span><span class=\"hljs-selector-class\">.client</span><span class=\"hljs-selector-class\">.config</span><span class=\"hljs-selector-class\">.js</span>&quot;,<br/> &nbsp; &nbsp;&quot;<span class=\"hljs-selector-tag\" style=\"font-weight: 700;\">packserver</span>&quot;: &quot;<span class=\"hljs-selector-tag\" style=\"font-weight: 700;\">webpack</span> <span class=\"hljs-selector-tag\" style=\"font-weight: 700;\">--config</span> <span class=\"hljs-selector-tag\" style=\"font-weight: 700;\">webpack</span><span class=\"hljs-selector-class\">.server</span><span class=\"hljs-selector-class\">.config</span><span class=\"hljs-selector-class\">.js</span>&quot;</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">然后在命令行运行</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs coffeescript\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\"> &nbsp; &nbsp;<span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">npm</span> run packclient<br/> &nbsp; &nbsp;<span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">npm</span> run packserver</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">就会生成两个文件 client-bundle.js 和 server-bundle.js</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><ul style=\"padding: 0px 0px 0px 2.7rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"line-height: 2.27rem;\">创建服务端渲染器</p></li></ul><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs lua\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\">// controller.js<br/><br/> &nbsp;const serialize = <span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">require</span>(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;serialize-javascript&#39;</span>);<br/> &nbsp;// 因为我们在vue-router 的配置里面使用了 `base: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;/c&#39;</span>`，这里需要去掉请求path中的 <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;/c&#39;</span><br/> &nbsp;let url = this.url.replace(/\\/c/, <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;&#39;</span>);<br/> &nbsp;let context = { url: this.url };<br/> &nbsp;// 创建渲染器<br/> &nbsp;let bundleRenderer = createRenderer(fs.readFileSync(resolve(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./dist/server-bundle.js&#39;</span>)， <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;utf-8&#39;</span>))<br/> &nbsp;let html = yield new Promise((resolve， reject) =&gt; {<br/> &nbsp; &nbsp; &nbsp;// 将vue实例编译成一个字符串<br/> &nbsp; &nbsp; &nbsp;bundleRenderer.renderToString(<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;context， &nbsp; // 传递context 给 server-bundle.js 使用<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(err， html) =&gt; {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">if</span>(err) {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;console.<span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">error</span>(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;server render error&#39;</span>， err);<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;resolve(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;&#39;</span>);<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/**<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 还记得在 server-entry.js 里面 `context.initialState = store.state` 这行代码么？<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 这里就直接把数据发送到浏览器端啦<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;**/<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;html += `&lt;script&gt;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 将服务器获取到的数据作为首屏数据发送到浏览器<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;window.__INITIAL_STATE__ = ${serialize(context.initialState， { isJSON: <span class=\"hljs-keyword\" style=\"font-weight: 700;\">true</span> })}<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/script&gt;`;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;resolve(html);<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br/> &nbsp; &nbsp; &nbsp;)<br/> &nbsp;})<br/><br/> &nbsp;yield this.render(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;ssr&#39;</span>， html);<br/><br/> &nbsp;// 创建渲染器函数<br/> &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">function</span> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">createRenderer</span><span class=\"hljs-params\">(code)</span></span> {<br/> &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">require</span>(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;vue-server-renderer&#39;</span>).createBundleRenderer(code);<br/> &nbsp;}</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">在 node 的 views 模板文件中只需要将上面的 html 输出就可以了</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs django\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\"><span class=\"xml\">// ssr.html</span><br/><span class=\"xml\"> &nbsp; &nbsp;</span><span class=\"hljs-template-tag\">{% <span class=\"hljs-name\" style=\"color: navy;\"><span class=\"hljs-name\">extends</span></span> &#39;layout.html&#39; %}</span><br/><span class=\"xml\"> &nbsp; &nbsp;</span><span class=\"hljs-template-tag\">{% <span class=\"hljs-name\" style=\"color: navy;\"><span class=\"hljs-name\">block</span></span> body %}</span><br/><span class=\"xml\"> &nbsp; &nbsp; &nbsp; &nbsp;</span><span class=\"hljs-template-variable\" style=\"color: teal;\">{{ html | safe }}</span><br/><span class=\"xml\"> &nbsp; &nbsp;</span><span class=\"hljs-template-tag\">{% <span class=\"hljs-name\" style=\"color: navy;\"><span class=\"hljs-name\">endblock</span></span> %}</span><br/><br/><span class=\"xml\"> &nbsp; &nbsp;<span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\" style=\"color: teal;\">src</span>=<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&quot;/public/client.js&quot;</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">这样，一个简单的服务端渲染就结束了，限于篇幅，详细的代码请参考&nbsp;Github代码库。</p><blockquote style=\"margin: 1em 0px; border-left: 4px solid rgb(221, 221, 221); padding: 0px 1.3rem; color: rgb(102, 102, 102); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"line-height: 2.27rem; margin-top: 0.6rem; margin-bottom: 0.6rem;\">https://github.com/pangz1/vue-ssr</p></blockquote><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p><br/></p>","title":"Vue 服务端渲染业务入门实践","time":"2017-10-20","sort":"vue"},{"info":"<p><span style=\"color: rgb(51, 51, 51); font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13.3333px; white-space: pre; background-color: rgb(248, 248, 248);\">// server.js</span><br/></p><p><span style=\"color: #d55fde;\">const</span><span style=\"color: #ef596f;\"> bodyParser</span><span style=\"color: #aab1c0;\"> =</span> <span style=\"color: #52adf2;\">require</span>(<span style=\"color: #98c378;\">&#39;</span><span style=\"color: #89ca78;\">body-parser</span><span style=\"color: #98c378;\">&#39;</span>);</p><p><span style=\"color: rgb(51, 51, 51); font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13.3333px; white-space: pre; background-color: rgb(248, 248, 248);\"></span><br/></p><p><span style=\"color: #ef596f;\">app</span><span style=\"color: #aab1c0;\">.</span><span style=\"color: #52adf2;\">use</span>(<span style=\"color: #ef596f;\">bodyParser</span><span style=\"color: #aab1c0;\">.</span><span style=\"color: #52adf2;\">json</span>({<span style=\"color: #89ca78;\">limit</span>: <span style=\"color: #98c378;\">&#39;</span><span style=\"color: #89ca78;\">50mb</span><span style=\"color: #98c378;\">&#39;</span>}));</p><p><span style=\"color: #ef596f;\">app</span><span style=\"color: #aab1c0;\">.</span><span style=\"color: #52adf2;\">use</span>(<span style=\"color: #ef596f;\">bodyParser</span><span style=\"color: #aab1c0;\">.</span><span style=\"color: #52adf2;\">urlencoded</span>({<span style=\"color: #89ca78;\">limit</span>: <span style=\"color: #98c378;\">&#39;</span><span style=\"color: #89ca78;\">50mb</span><span style=\"color: #98c378;\">&#39;</span>,<span style=\"color: #d8985f;\"> </span><span style=\"color: #89ca78;\">extended</span>:<span style=\"color: #d8985f;\"> true</span>}));</p><p><br/></p>","title":"nodejs Error: request entity too large解决方案","time":"2017-10-26","sort":"node"},{"info":"<h2 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 40px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 26px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">Mongoose 是什么?</h2><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">一般我们不直接用MongoDB的函数来操作MongoDB数据库 Mongose就是一套操作MongoDB数据库的接口.</p><h4 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 20px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 17.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">Schema</h4><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">一种以文件形式存储的数据库模型骨架，无法直接通往数据库端，也就是说它不具备对数据库的操作能力.可以说是数据属性模型(传统意义的表结构)，又或着是“集合”的模型骨架</p><pre class=\"prettyprint\" style=\"line-height: 22px; white-space: pre-wrap; padding: 0px 15px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; color: rgb(51, 51, 51); border-radius: 0px; margin: 20px -10px; word-break: break-all; word-wrap: break-word; background-color: rgb(247, 247, 247); border-width: 1px 0px; border-style: none; border-color: initial; border-image: initial; tab-size: 4;\">/*&nbsp;定义一个&nbsp;Schema&nbsp;*/var&nbsp;mongoose&nbsp;=&nbsp;require(&quot;mongoose&quot;);var&nbsp;TestSchema&nbsp;=&nbsp;new&nbsp;mongoose.Schema({\n&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;:&nbsp;{&nbsp;type:String&nbsp;},//属性name,类型为String\n&nbsp;&nbsp;&nbsp;&nbsp;age&nbsp;&nbsp;:&nbsp;{&nbsp;type:Number,&nbsp;default:0&nbsp;},//属性age,类型为Number,默认为0\n&nbsp;&nbsp;&nbsp;&nbsp;time&nbsp;:&nbsp;{&nbsp;type:Date,&nbsp;default:Date.now&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;email:&nbsp;{&nbsp;type:String,default:&#39;&#39;}});</pre><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">上面这个 TestSchema包含4个属性 [name, age, time, email]</p><h4 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 20px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 17.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">Model</h4><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">由Schema构造生成的模型，除了Schema定义的数据库骨架以外，还具有数据库操作的行为，类似于管理数据库属性、行为的类</p><pre class=\"prettyprint\" style=\"line-height: 22px; white-space: pre-wrap; padding: 0px 15px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; color: rgb(51, 51, 51); border-radius: 0px; margin: 20px -10px; word-break: break-all; word-wrap: break-word; background-color: rgb(247, 247, 247); border-width: 1px 0px; border-style: none; border-color: initial; border-image: initial; tab-size: 4;\">var&nbsp;db&nbsp;=&nbsp;mongoose.connect(&quot;mongodb://127.0.0.1:27017/test&quot;);//&nbsp;创建Modelvar&nbsp;TestModel&nbsp;=&nbsp;db.model(&quot;test1&quot;,&nbsp;TestSchema);</pre><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">test1 数据库中的集合名称, 不存在会创建.</p><h4 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 20px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 17.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">Entity</h4><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">由Model创建的实体，使用save方法保存数据，Model和Entity都有能影响数据库的操作，但Model比Entity更具操作性</p><pre class=\"prettyprint\" style=\"line-height: 22px; white-space: pre-wrap; padding: 0px 15px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; color: rgb(51, 51, 51); border-radius: 0px; margin: 20px -10px; word-break: break-all; word-wrap: break-word; background-color: rgb(247, 247, 247); border-width: 1px 0px; border-style: none; border-color: initial; border-image: initial; tab-size: 4;\">var&nbsp;TestEntity&nbsp;=&nbsp;new&nbsp;TestModel({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;:&nbsp;&quot;Lenka&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age&nbsp;&nbsp;:&nbsp;36,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;email:&nbsp;&quot;lenka@qq.com&quot;});console.log(TestEntity.name);&nbsp;//&nbsp;Lenkaconsole.log(TestEntity.age);&nbsp;//&nbsp;36</pre><h4 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 20px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 17.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">游标</h4><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">MongoDB 使用游标返回find的执行结果.客户端对游标的实现通常能够对最终结果进行有效的控制。可以限制结果的数量，略过部分结果，根据任意键按任意顺序的组合对结果进行各种排序，或者是执行其他一些强的操作。</p><h4 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 20px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 17.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">ObjectId</h4><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">存储在mongodb集合中的每个文档（document）都有一个默认的主键_id，这个主键名称是固定的，它可以是mongodb支持的任何数据类型，默认是ObjectId。</p><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">ObjectId是一个12字节的 BSON 类型字符串。按照字节顺序，依次代表：\n4字节：UNIX时间戳\n3字节：表示运行MongoDB的机器\n2字节：表示生成此_id的进程\n3字节：由一个随机数开始的计数器生成的值</p><h4 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 20px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 17.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">Node.js 中</h4><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">package.json 中加入&quot;mongoose&quot;: “*” 字段\nnpm install 安装依赖.</p><pre class=\"prettyprint\" style=\"line-height: 22px; white-space: pre-wrap; padding: 0px 15px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; color: rgb(51, 51, 51); border-radius: 0px; margin: 20px -10px; word-break: break-all; word-wrap: break-word; background-color: rgb(247, 247, 247); border-width: 1px 0px; border-style: none; border-color: initial; border-image: initial; tab-size: 4;\">var&nbsp;mongoose&nbsp;=&nbsp;require(&quot;mongoose&quot;);var&nbsp;db&nbsp;=&nbsp;mongoose.connect(&quot;mongodb://localhost:27017/test&quot;);</pre><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">然后引用</p><h2 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 40px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 26px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">API</h2><pre class=\"prettyprint\" style=\"line-height: 22px; white-space: pre-wrap; padding: 0px 15px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; color: rgb(51, 51, 51); border-radius: 0px; margin: 20px -10px; word-break: break-all; word-wrap: break-word; background-color: rgb(247, 247, 247); border-width: 1px 0px; border-style: none; border-color: initial; border-image: initial; tab-size: 4;\">var&nbsp;mongoose&nbsp;=&nbsp;require(&quot;mongoose&quot;);var&nbsp;db&nbsp;=&nbsp;mongoose.connect(&quot;mongodb://localhost:27017/test&quot;);</pre><h3 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 40px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 24.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">db - 数据库操作</h3><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">1.挂接数据库连接事件,参数1: 也可以是error.</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">db.connection.on(‘open’, callback);</p></blockquote><h3 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 40px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 24.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">Schema - 表结构</h3><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">1.构造函数</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">new mongoose.Schema( { name:{type:String}, age:{type:Number, default:10} &nbsp;} )</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">2.添加属性</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Schema.add( { name: ‘String’, email: ‘String’, age: ‘Number’ } )</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">3.有时候Schema不仅要为后面的Model和Entity提供公共的属性，还要提供公共的方法</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Schema.method( ‘say’, function(){console.log(‘hello’);} )\n//这样Model和Entity的实例就能使用这个方法了</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">4.添加静态方法</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Schema.static( ‘say’, function(){console.log(‘hello’);} )\n//静态方法，只限于在Model层就能使用</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">5.追加方法</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Schema.methods.say = function(){console.log(‘hello’);};\n//静态方法，只限于在Model层就能使用</p></blockquote><h3 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 40px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 24.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">model - 文档操作</h3><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">1.构造函数, 参数1:集合名称, 参数2:Schema实例</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">db.model(“test1”, TestSchema );</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">2.查询, 参数1忽略,或为空对象则返回所有集合文档</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">model.find({}, callback);</p></blockquote><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">model.find({},field,callback);\n过滤查询,参数2: {‘name’:1, ‘age’:0} 查询文档的返回结果包含name , 不包含age.(_id默认是1)</p></blockquote><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">model.find({},null,{limit:20});\n过滤查询,参数3: 游标操作 limit限制返回结果数量为20个,如不足20个则返回所有.</p></blockquote><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">model.findOne({}, callback);\n查询找到的第一个文档</p></blockquote><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">model.findById(‘obj._id’, callback);\n查询找到的第一个文档,同上. 但是只接受 __id 的值查询</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">3.创建, 在集合中创建一个文档</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.create(文档数据, callback))</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">4.更新,参数1:查询条件, 参数2:更新对象,可以使用MondoDB的更新修改器</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.update(conditions, update, function(error)</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">5.删除, 参数1:查询条件</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.remove(conditions,callback);</p></blockquote><h3 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 40px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 24.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">Entity - 文档操作</h3><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">1.构造函数, 其实就是model的实例</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">new TestModel( { name:‘xueyou’, age:21 } );</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">2.创建, 在集合中创建一个文档.</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Entity.save(callback);</p></blockquote><h2 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 40px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 26px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">修改器和更新器</h2><h4 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 20px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 17.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">更新修改器:</h4><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">‘$inc’ 增减修改器,只对数字有效.下面的实例: 找到 age=22的文档,修改文档的age值自增1</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.update({‘age’:22}, {’$inc’:{‘age’:1} } &nbsp;);\n执行后: age=23</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">‘$set’ 指定一个键的值,这个键不存在就创建它.可以是任何MondoDB支持的类型.</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.update({‘age’:22}, {’$set’:{‘age’:‘haha’} } &nbsp;);\n执行后: age=‘haha’</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">‘$unset’ 同上取反,删除一个键</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.update({‘age’:22}, {’$unset’:{‘age’:‘haha’} } &nbsp;);\n执行后: age键不存在</p></blockquote><h4 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 20px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 17.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">数组修改器:</h4><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">‘$push’ 给一个键push一个数组成员,键不存在会创建</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.update({‘age’:22}, {’$push’:{‘array’:10} } &nbsp;);\n执行后: 增加一个 array 键,类型为数组, 有一个成员 10</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">‘$addToSet’ 向数组中添加一个元素,如果存在就不添加</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.update({‘age’:22}, {’$addToSet’:{‘array’:10} } &nbsp;);\n执行后: array中有10所以不会添加</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">‘$each’ 遍历数组, 和 $push 修改器配合可以插入多个值</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.update({‘age’:22}, {’$push’:{‘array’:{’$each’: [1,2,3,4,5]}} } &nbsp;);\n执行后: array : [10,1,2,3,4,5]</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">‘$pop’ 向数组中尾部删除一个元素</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.update({‘age’:22}, {’$pop’:{‘array’:1} } &nbsp;);\n执行后: array : [10,1,2,3,4] &nbsp;tips: 将1改成-1可以删除数组首部元素</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">‘$pull’ 向数组中删除指定元素</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.update({‘age’:22}, {’$pull’:{‘array’:10} } &nbsp;);\n执行后: array : [1,2,3,4] &nbsp;匹配到array中的10后将其删除</p></blockquote><h4 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 20px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 17.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">条件查询:</h4><ul style=\"padding: 0px; margin-bottom: 10px; margin-left: 25px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>“$lt”\t小于</p></li><li><p>“$lte”\t小于等于</p></li><li><p>“$gt”\t大于</p></li><li><p>“$gte”\t大于等于</p></li><li><p>“$ne”\t不等于</p></li></ul><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.find({“age”:{ “$get”:18 , “$lte”:30 } } );\n查询 age 大于等于18并小于等于30的文档</p></blockquote><h4 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 20px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 17.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">或查询 OR:</h4><ul style=\"padding: 0px; margin-bottom: 10px; margin-left: 25px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>‘$in’ 一个键对应多个值</p></li><li><p>‘$nin’ 同上取反, 一个键不对应指定值</p></li><li><p>“$or” 多个条件匹配, 可以嵌套 $in 使用</p></li><li><p>“$not”\t同上取反, 查询与特定模式不匹配的文档</p></li></ul><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.find({“age”:{ “$in”:[20,21,22.‘haha’]} } );\n查询 age等于20或21或21或’haha’的文档</p></blockquote><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.find({&quot;$or&quot; : &nbsp;[ {‘age’:18} , {‘name’:‘xueyou’} ] });\n查询 age等于18 或 name等于’xueyou’ 的文档</p></blockquote><h4 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 20px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 17.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">类型查询:</h4><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">null 能匹配自身和不存在的值, 想要匹配键的值 为null, 就要通过 &nbsp;“$exists” 条件判定键值已经存在\n&quot;$exists&quot; (表示是否存在的意思)</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.find(“age” : &nbsp;{ “$in” : [null] , “exists” : true &nbsp;} );\n查询 age值为null的文档</p></blockquote><pre class=\"prettyprint\" style=\"line-height: 22px; white-space: pre-wrap; padding: 0px 15px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; color: rgb(51, 51, 51); border-radius: 0px; margin: 20px -10px; word-break: break-all; word-wrap: break-word; background-color: rgb(247, 247, 247); border-width: 1px 0px; border-style: none; border-color: initial; border-image: initial; tab-size: 4;\">Model.find({name:&nbsp;{$exists:&nbsp;true}},function(error,docs){\n&nbsp;&nbsp;//查询所有存在name属性的文档});Model.find({telephone:&nbsp;{$exists:&nbsp;false}},function(error,docs){\n&nbsp;&nbsp;//查询所有不存在telephone属性的文档});</pre><h4 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 20px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 17.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">正则表达式:</h4><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">MongoDb 使用 Prel兼容的正则表达式库来匹配正则表达式</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">find( {“name” : /joe/i } )\t\n查询name为 joe 的文档, 并忽略大小写</p></blockquote><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">find( {“name” : /joe?/i } )\n查询匹配各种大小写组合</p></blockquote><h4 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 20px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 17.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">查询数组:</h4><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.find({“array”:10} );\n查询 array(数组类型)键中有10的文档, &nbsp;array : [1,2,3,4,5,10] &nbsp;会匹配到</p></blockquote><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.find({“array[5]”:10} );\n查询 array(数组类型)键中下标5对应的值是10, &nbsp;array : [1,2,3,4,5,10] &nbsp;会匹配到</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">‘$all’ 匹配数组中多个元素</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.find({“array”:[5,10]} );\n查询 匹配array数组中 既有5又有10的文档</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">‘$size’ 匹配数组长度</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.find({“array”:{&quot;$size&quot; : 3} } );\n查询 匹配array数组长度为3 的文档</p></blockquote><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">‘$slice’ 查询子集合返回</p><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.find({“array”:{&quot;$skice&quot; : 10} } );\n查询 匹配array数组的前10个元素</p></blockquote><blockquote style=\"padding: 0px 0px 0px 15px; margin: 0px 0px 20px; border-left: 5px solid rgb(238, 238, 238); color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; line-height: 1.7em; white-space: pre-wrap; word-wrap: break-word; overflow: auto;\">Model.find({“array”:{&quot;$skice&quot; : [5,10] } } );\n查询 匹配array数组的第5个到第10个元素</p></blockquote><h4 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 20px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 17.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">where</h4><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">用它可以执行任意javacript语句作为查询的一部分,如果回调函数返回 true 文档就作为结果的一部分返回</p><pre class=\"prettyprint\" style=\"line-height: 22px; white-space: pre-wrap; padding: 0px 15px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; color: rgb(51, 51, 51); border-radius: 0px; margin: 20px -10px; word-break: break-all; word-wrap: break-word; background-color: rgb(247, 247, 247); border-width: 1px 0px; border-style: none; border-color: initial; border-image: initial; tab-size: 4;\">\tfind(&nbsp;{&quot;$where&quot;&nbsp;:&nbsp;function(){\n\t\tfor(&nbsp;var&nbsp;x&nbsp;in&nbsp;this&nbsp;){\n\t\t&nbsp;//这个函数中的&nbsp;this&nbsp;就是文档\n\t\t}\n\t\t\n\t\tif(this.x&nbsp;!==&nbsp;null&nbsp;&amp;&amp;&nbsp;this.y&nbsp;!==&nbsp;null){\n\t\t&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.x&nbsp;+&nbsp;this.y&nbsp;===&nbsp;10&nbsp;?&nbsp;true&nbsp;:&nbsp;false;\n\t\t}else{\n\t\t&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;\n\t\t}\n\t\t\n\t\t}&nbsp;&nbsp;}&nbsp;&nbsp;)</pre><p style=\"margin-top: 1em; margin-bottom: 1em; font-size: 15px; word-break: break-word; white-space: pre-wrap; word-wrap: break-word; line-height: 1.7em; overflow: auto; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; background-color: rgb(255, 255, 255);\">简化版本</p><pre class=\"prettyprint\" style=\"line-height: 22px; white-space: pre-wrap; padding: 0px 15px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; color: rgb(51, 51, 51); border-radius: 0px; margin: 20px -10px; word-break: break-all; word-wrap: break-word; background-color: rgb(247, 247, 247); border-width: 1px 0px; border-style: none; border-color: initial; border-image: initial; tab-size: 4;\">\tfind(&nbsp;{&quot;$where&quot;&nbsp;:&nbsp;&nbsp;&quot;this.x&nbsp;+&nbsp;this.y&nbsp;===&nbsp;10&quot;&nbsp;}&nbsp;)\n\tfind(&nbsp;{&quot;$where&quot;&nbsp;:&nbsp;&quot;&nbsp;function(){&nbsp;return&nbsp;this.x&nbsp;+&nbsp;this.y&nbsp;===10;&nbsp;}&nbsp;&quot;&nbsp;}&nbsp;)</pre><h4 style=\"margin: 30px 0px 15px; font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; line-height: 20px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 17.5px; border-bottom: 1px solid rgb(238, 238, 238); white-space: normal; background-color: rgb(255, 255, 255);\">游标:</h4><ul style=\"padding: 0px; margin-bottom: 1em; margin-left: 25px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, &quot;Luxi Sans&quot;, &quot;DejaVu Sans&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, STHeiti, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>limit(3)\t限制返回结果的数量,</p></li><li><p>skip(3)\t跳过前3个文档,返回其余的</p></li><li><p>sort( {“username”:1 , “age”:-1 } )\t排序 键对应文档的键名, 值代表排序方向, 1 升序, -1降序</p></li></ul><p><br/></p>","title":"Mongoose 参考手册","time":"2017-10-30","sort":"node"}
]