export default [{"info":"<h2 style=\"color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">怎么实现?</h2><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-weight: 700;\"><br/></span></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">知道了Vue服务端渲染的大致流程，那怎么用代码来实现呢?</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p><section><section><section><section><section></section></section><section><p style=\"line-height: 2.27rem;\">1. 创建一个 vue 实例</p><p style=\"line-height: 2.27rem;\">2. 配置路由，以及相应的视图组件</p><p style=\"line-height: 2.27rem;\">3. 使用 vuex 管理数据</p><p style=\"line-height: 2.27rem;\">4. 创建服务端入口文件</p><p style=\"line-height: 2.27rem;\">5. 创建客户端入口文件</p><p style=\"line-height: 2.27rem;\">6. 配置 webpack，分服务端打包配置和客户端打包配置</p><p style=\"line-height: 2.27rem;\">7. 创建服务器端的渲染器，将vue实例渲染成html</p></section><section><section></section><section></section></section></section></section></section></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><ul style=\"padding: 0px 0px 0px 2.7rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"line-height: 2.27rem;\">首先我们来创建一个 vue 实例</p></li></ul><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs python\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\">// app.js<br/><br/> &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> Vue <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;vue&#39;</span>;<br/> &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> router <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./router&#39;</span>;<br/> &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> store <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./store&#39;</span>;<br/> &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> App <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./components/app&#39;</span>; &nbsp; <br/><br/> &nbsp; &nbsp;let app = new Vue({<br/> &nbsp; &nbsp; &nbsp; &nbsp;template: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;&lt;app&gt;&lt;/app&gt;&#39;</span>，<br/> &nbsp; &nbsp; &nbsp; &nbsp;base: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;/c/&#39;</span>，<br/> &nbsp; &nbsp; &nbsp; &nbsp;components: {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;App<br/> &nbsp; &nbsp; &nbsp; &nbsp;}，<br/> &nbsp; &nbsp; &nbsp; &nbsp;router，<br/> &nbsp; &nbsp; &nbsp; &nbsp;store<br/> &nbsp; &nbsp;});<br/><br/> &nbsp; &nbsp;export {<br/> &nbsp; &nbsp; &nbsp; &nbsp;app，<br/> &nbsp; &nbsp; &nbsp; &nbsp;router，<br/> &nbsp; &nbsp; &nbsp; &nbsp;store<br/> &nbsp; &nbsp;}</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">和我们以前写的vue实例差别不大，但是我们不会在这里将app mount到DOM上，因为这个实例也会在服务端去运行，这里直接将 app 暴露出去。</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><ul style=\"padding: 0px 0px 0px 2.7rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"line-height: 2.27rem;\">配置 vue 路由<br/></p></li></ul><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs javascript\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\"> &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> Vue <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;vue&#39;</span>;<br/> &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> VueRouter <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;vue-router&#39;</span>;<br/><br/> &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> IndexView <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;../views/indexView&#39;</span>;<br/> &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> ArticleItems <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;../views/articleItems&#39;</span>;<br/><br/> &nbsp;Vue.use(VueRouter);<br/><br/> &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">const</span> router = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> VueRouter({<br/> &nbsp; &nbsp; &nbsp;mode: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;history&#39;</span>，<br/> &nbsp; &nbsp; &nbsp;base: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;/c/&#39;</span>，<br/> &nbsp; &nbsp; &nbsp;routes: [<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;path: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;/:alias&#39;</span>，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;component: IndexView<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}， {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;path: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;/:alias/list&#39;</span>，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;component: ArticleItems<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br/> &nbsp; &nbsp; &nbsp;]<br/> &nbsp;});</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">注意这里的 base，在服务端传递 path 给 vue-router 的时候要注意去掉前面的 &#39;/c/&#39;，否则会匹配不到。</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><ul style=\"padding: 0px 0px 0px 2.7rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"line-height: 2.27rem;\">创建视图组件，这里我们使用单文件组件，下面是 indexView.vue 文件的实例代码</p></li></ul><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs xml\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\"><span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br/> &nbsp; &nbsp; &nbsp;<span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\" style=\"color: teal;\">class</span>=<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&quot;content&quot;</span>&gt;</span><br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-name\">course-cover</span> <span class=\"hljs-attr\" style=\"color: teal;\">:class-data</span>=<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&quot;classData[0]&quot;</span>&gt;</span><span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-name\">course-cover</span>&gt;</span><br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-name\">article-items</span> <span class=\"hljs-attr\" style=\"color: teal;\">:article-items</span>=<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&quot;articleItems&quot;</span>&gt;</span><span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-name\">article-items</span>&gt;</span><br/> &nbsp; &nbsp; &nbsp;<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br/> &nbsp;<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br/><br/> &nbsp;<span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> courseCover <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;../components/courseCover.vue&#39;</span>;</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> articleItems <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;../components/articleItems&#39;</span>;</span><br/><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">export</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">default</span> {</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;computed: {</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;classData() {</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">this</span>.$store.state.courseListItems;</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;articleItems() {</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">this</span>.$store.state.articleItems;</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;components: {</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;courseCover，</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;articleItems</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，</span><br/><span class=\"javascript\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\">// 服务端获取数据</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fetchServerData ({ state， dispatch， commit }) {</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;let alias = state.route.params.alias;</span></span><br/><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return Promise.all([</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dispatch(&#39;FETCH_ZT&#39;， { alias })，</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dispatch(&#39;FETCH_COURSE_ITEMS&#39;)，</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dispatch(&#39;FETCH_ARTICLE_ITEMS&#39;)</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;])</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 客户端获取数据</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;beforeMount() {</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return this.$store.dispatch(&#39;FETCH_COURSE_ITEMS&#39;);</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp; &nbsp; &nbsp;}</span></span><br/><span class=\"javascript\"><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"> &nbsp;</span></span><span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">这里我们暴露一个 fetchServerData 方法用来在服务端渲染时做数据的预加载，具体在哪调用，下面会讲到。 beforeMount 是vue的生命周期钩子函数，当应用在客户端切换到这个视图的时候会在特定的时候去执行，用于在客户端获取数据。</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><ul style=\"padding: 0px 0px 0px 2.7rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"line-height: 2.27rem;\">使用 vuex 管理数据，vue2.0 的服务端官方推荐使用&nbsp;<a style=\"background-color: transparent; cursor: pointer; color: rgb(34, 85, 153);\">STORE</a>&nbsp;来管理数据，和1.0相比 api 有一些调整</p></li></ul><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs coffeescript\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\"> &nbsp;import Vue from <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;vue&#39;</span>;<br/> &nbsp;import Vuex from <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;vuex&#39;</span>;<br/> &nbsp;import axios from <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;axios&#39;</span>;<br/><br/> &nbsp;Vue.use(Vuex);<br/><br/> &nbsp;let apiHost = <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;http://localhost:3000&#39;</span>;<br/><br/> &nbsp;const store = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> Vuex.Store({<br/> &nbsp; &nbsp; &nbsp;state: {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;alias: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;&#39;</span>，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ztData: {}，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;courseListItems: []，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;articleItems: []<br/> &nbsp; &nbsp; &nbsp;}，<br/> &nbsp; &nbsp; &nbsp;actions: {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FETCH_ZT: <span class=\"hljs-function\"><span class=\"hljs-params\">({ commit， dispatch， state }， { alias })</span> = {</span><br/><span class=\"hljs-function\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;commit<span class=\"hljs-params\">(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;SET_ALIAS&#39;</span>， { alias })</span>;</span><br/><span class=\"hljs-function\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return axios.get<span class=\"hljs-params\">(`<span class=\"javascript\">${apiHost}/api/zt</span>`)</span></span><br/><span class=\"hljs-function\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.then<span class=\"hljs-params\">(response =&gt; {</span></span><br/><span class=\"hljs-function\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;let data = response.data || {};</span><br/><span class=\"hljs-function\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;commit(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;SET_ZT_DATA&#39;</span>， data);</span><br/><span class=\"hljs-function\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;})</span><br/><span class=\"hljs-function\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，</span><br/><span class=\"hljs-function\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FETCH_COURSE_ITEMS: <span class=\"hljs-params\">({ commit， dispatch， state })</span> =&gt;</span> {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> axios.get(`<span class=\"javascript\">${apiHost}/api/course_items</span>`).<span class=\"hljs-keyword\" style=\"font-weight: 700;\">then</span>(response =&gt; {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;let data = response.data;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;commit(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;SET_COURSE_ITEMS&#39;</span>， data);<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;});<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FETCH_ARTICLE_ITEMS: <span class=\"hljs-function\"><span class=\"hljs-params\">({ commit， dispatch， state })</span> =&gt;</span> {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> axios.get(`<span class=\"javascript\">${apiHost}/api/article_items</span>`)<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.<span class=\"hljs-keyword\" style=\"font-weight: 700;\">then</span>(response =&gt; {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;let data = response.data;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;commit(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;SET_ARTICLE_ITEMS&#39;</span>， data);<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;})<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br/> &nbsp; &nbsp; &nbsp;}，<br/> &nbsp; &nbsp; &nbsp;mutations: {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SET_COURSE_ITEMS: <span class=\"hljs-function\"><span class=\"hljs-params\">(state， data)</span> =&gt;</span> {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;state.courseListItems = data;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SET_ALIAS: <span class=\"hljs-function\"><span class=\"hljs-params\">(state， { alias })</span> =&gt;</span> {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;state.alias = alias;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SET_ZT_DATA: <span class=\"hljs-function\"><span class=\"hljs-params\">(state， { ztData })</span> =&gt;</span> {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;state.ztData = ztData;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SET_ARTICLE_ITEMS: <span class=\"hljs-function\"><span class=\"hljs-params\">(state， items)</span> =&gt;</span> {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;state.articleItems = items;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br/> &nbsp; &nbsp; &nbsp;}<br/> &nbsp;})<br/><br/> &nbsp;export default store;</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">state 使我们应用层的数据，相当于一个仓库，整个应用层的数据都存在这里，与不使用vuex的vue应用有两点不同：<br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p><section><section><section><section><p style=\"line-height: 2.27rem;\">- &nbsp;Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p><p style=\"line-height: 2.27rem;\">- &nbsp;Vuex 不允许我们直接对 store 中的数据进行操作。改变 store 中的状态的唯一途径就是显式地提交(commit) mutations。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</p></section><section><section></section><section></section></section></section></section></section></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">action 响应在view上的用户输入导致的状态变化，并不直接操作数据，异步的逻辑都封装在这里执行，它最终的目的是提交 mutation 来操作数据。 mutation vuex 中修改store 数据的唯一方法，使用 commit 来提交。</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><ul style=\"padding: 0px 0px 0px 2.7rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"line-height: 2.27rem;\">创建服务端的入口文件 server-entry.js</p></li></ul><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs coffeescript\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\"><span class=\"hljs-regexp\" style=\"color: rgb(0, 153, 38);\">//</span> server-entry.js<br/> &nbsp; &nbsp;import {app， router， store} from <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./app&#39;</span>;<br/><br/> &nbsp; &nbsp;export default context =&gt; {<br/><br/> &nbsp; &nbsp; &nbsp; &nbsp;const s = Date.now();<br/> &nbsp; &nbsp; &nbsp; &nbsp;router.push(context.url);<br/> &nbsp; &nbsp; &nbsp; &nbsp;const matchedComponents = router.getMatchedComponents();<br/> &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">if</span>(!matchedComponents) {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> Promise.reject({ code: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;404&#39;</span> });<br/> &nbsp; &nbsp; &nbsp; &nbsp;}<br/><br/> &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> Promise.all(<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;matchedComponents.map(component =&gt; {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">if</span>(component.fetchServerData) {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> component.fetchServerData(store);<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;})<br/> &nbsp; &nbsp; &nbsp; &nbsp;).<span class=\"hljs-keyword\" style=\"font-weight: 700;\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;context.initialState = store.state;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> app;<br/> &nbsp; &nbsp; &nbsp; &nbsp;})<br/> &nbsp; &nbsp;}</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">server.js 返回一个函数，该函数接受一个从服务端传递过来的 context 的参数，将 vue 实例通过 promise 返回。 context 一般包含 当前页面的url，首先我们调用 vue-router 的 router.push(url) 切换到到对应的路由， 然后调用 getMatchedComponents 方法返回对应要渲染的组件， 这里会检查组件是否有 fetchServerData 方法，如果有就会执行它。</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">下面这行代码将服务端获取到的数据挂载到 context 对象上，后面会把这些数据直接发送到浏览器端与客户端的vue 实例进行数据(状态)同步。</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\">`context.initialState&nbsp;=&nbsp;store.state`</pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">创建客户端入口文件 client-entry.js</p><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs python\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\">// client-entry.js<br/> &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> { app， store } <span class=\"hljs-keyword\" style=\"font-weight: 700;\">from</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./app&#39;</span>;<br/> &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./main.scss&#39;</span>;<br/> &nbsp; &nbsp;store.replaceState(window.__INITIAL_STATE__);<br/> &nbsp; &nbsp;app.$mount(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;#app&#39;</span>);</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">客户端入口文件很简单，同步服务端发送过来的数据，然后把 vue 实例挂载到服务端渲染的 DOM 上。</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><ul style=\"padding: 0px 0px 0px 2.7rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"line-height: 2.27rem;\">配置 webpack</p></li></ul><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs coffeescript\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\"><span class=\"hljs-regexp\" style=\"color: rgb(0, 153, 38);\">//</span> webpack.server.config.js<br/> &nbsp; &nbsp;const base = <span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">require</span>(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./webpack.base.config&#39;</span>); <span class=\"hljs-regexp\" style=\"color: rgb(0, 153, 38);\">//</span> webpack 的通用配置<br/> &nbsp; &nbsp;<span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">module</span>.exports = Object.assign({}， base， {<br/> &nbsp; &nbsp; &nbsp; &nbsp;target: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;node&#39;</span>，<br/> &nbsp; &nbsp; &nbsp; &nbsp;entry: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./src/server-entry.js&#39;</span>，<br/> &nbsp; &nbsp; &nbsp; &nbsp;output: {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;filename: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;server-bundle.js&#39;</span>，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;libraryTarget: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;commonjs2&#39;</span><br/> &nbsp; &nbsp; &nbsp; &nbsp;}，<br/> &nbsp; &nbsp; &nbsp; &nbsp;externals: Object.keys(<span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">require</span>(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;../package.json&#39;</span>).dependencies)，<br/> &nbsp; &nbsp; &nbsp; &nbsp;plugins: [<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> webpack.DefinePlugin({<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;process.env.NODE_ENV&#39;</span>: JSON.stringify(process.env.NODE_ENV || <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;development&#39;</span>)，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;process.env.VUE_ENV&#39;</span>: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;&quot;server&quot;&#39;</span><br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;})<br/> &nbsp; &nbsp; &nbsp; &nbsp;]<br/> &nbsp; &nbsp;})</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">注意这里添加了&nbsp;target: &#39;node&#39;&nbsp;和&nbsp;libraryTarget: &#39;commonjs2&#39;，然后入口文件改成我们的 server-entry.js， 客户端的 webpack 和以前一样，这里就不贴了。</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><ul style=\"padding: 0px 0px 0px 2.7rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"line-height: 2.27rem;\">分别打包服务端代码和客户端代码</p></li></ul><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">因为有两个 webpack 配置文件，执行 webpack 时候就需要指定 --config 参数来编译不同的 bundle。 我们可以配置两个 npm script</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs css\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\"> &nbsp; &nbsp;&quot;<span class=\"hljs-selector-tag\" style=\"font-weight: 700;\">packclient</span>&quot;: &quot;<span class=\"hljs-selector-tag\" style=\"font-weight: 700;\">webpack</span> <span class=\"hljs-selector-tag\" style=\"font-weight: 700;\">--config</span> <span class=\"hljs-selector-tag\" style=\"font-weight: 700;\">webpack</span><span class=\"hljs-selector-class\">.client</span><span class=\"hljs-selector-class\">.config</span><span class=\"hljs-selector-class\">.js</span>&quot;,<br/> &nbsp; &nbsp;&quot;<span class=\"hljs-selector-tag\" style=\"font-weight: 700;\">packserver</span>&quot;: &quot;<span class=\"hljs-selector-tag\" style=\"font-weight: 700;\">webpack</span> <span class=\"hljs-selector-tag\" style=\"font-weight: 700;\">--config</span> <span class=\"hljs-selector-tag\" style=\"font-weight: 700;\">webpack</span><span class=\"hljs-selector-class\">.server</span><span class=\"hljs-selector-class\">.config</span><span class=\"hljs-selector-class\">.js</span>&quot;</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">然后在命令行运行</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs coffeescript\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\"> &nbsp; &nbsp;<span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">npm</span> run packclient<br/> &nbsp; &nbsp;<span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">npm</span> run packserver</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">就会生成两个文件 client-bundle.js 和 server-bundle.js</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><ul style=\"padding: 0px 0px 0px 2.7rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"line-height: 2.27rem;\">创建服务端渲染器</p></li></ul><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs lua\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\">// controller.js<br/><br/> &nbsp;const serialize = <span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">require</span>(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;serialize-javascript&#39;</span>);<br/> &nbsp;// 因为我们在vue-router 的配置里面使用了 `base: <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;/c&#39;</span>`，这里需要去掉请求path中的 <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;/c&#39;</span><br/> &nbsp;let url = this.url.replace(/\\/c/, <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;&#39;</span>);<br/> &nbsp;let context = { url: this.url };<br/> &nbsp;// 创建渲染器<br/> &nbsp;let bundleRenderer = createRenderer(fs.readFileSync(resolve(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;./dist/server-bundle.js&#39;</span>)， <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;utf-8&#39;</span>))<br/> &nbsp;let html = yield new Promise((resolve， reject) =&gt; {<br/> &nbsp; &nbsp; &nbsp;// 将vue实例编译成一个字符串<br/> &nbsp; &nbsp; &nbsp;bundleRenderer.renderToString(<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;context， &nbsp; // 传递context 给 server-bundle.js 使用<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(err， html) =&gt; {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">if</span>(err) {<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;console.<span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">error</span>(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;server render error&#39;</span>， err);<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;resolve(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;&#39;</span>);<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/**<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 还记得在 server-entry.js 里面 `context.initialState = store.state` 这行代码么？<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 这里就直接把数据发送到浏览器端啦<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;**/<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;html += `&lt;script&gt;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 将服务器获取到的数据作为首屏数据发送到浏览器<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;window.__INITIAL_STATE__ = ${serialize(context.initialState， { isJSON: <span class=\"hljs-keyword\" style=\"font-weight: 700;\">true</span> })}<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/script&gt;`;<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;resolve(html);<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br/> &nbsp; &nbsp; &nbsp;)<br/> &nbsp;})<br/><br/> &nbsp;yield this.render(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;ssr&#39;</span>， html);<br/><br/> &nbsp;// 创建渲染器函数<br/> &nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">function</span> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">createRenderer</span><span class=\"hljs-params\">(code)</span></span> {<br/> &nbsp; &nbsp; &nbsp;<span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">require</span>(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&#39;vue-server-renderer&#39;</span>).createBundleRenderer(code);<br/> &nbsp;}</code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">在 node 的 views 模板文件中只需要将上面的 html 输出就可以了</p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><pre style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; line-height: 1.93rem; overflow: auto; color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);\"><code class=\"hljs django\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1rem; padding: 0.67rem 1.3rem; word-break: normal; background: rgb(248, 248, 248); border-radius: 2px; overflow-x: auto; margin: 0px; display: block;\"><span class=\"xml\">// ssr.html</span><br/><span class=\"xml\"> &nbsp; &nbsp;</span><span class=\"hljs-template-tag\">{% <span class=\"hljs-name\" style=\"color: navy;\"><span class=\"hljs-name\">extends</span></span> &#39;layout.html&#39; %}</span><br/><span class=\"xml\"> &nbsp; &nbsp;</span><span class=\"hljs-template-tag\">{% <span class=\"hljs-name\" style=\"color: navy;\"><span class=\"hljs-name\">block</span></span> body %}</span><br/><span class=\"xml\"> &nbsp; &nbsp; &nbsp; &nbsp;</span><span class=\"hljs-template-variable\" style=\"color: teal;\">{{ html | safe }}</span><br/><span class=\"xml\"> &nbsp; &nbsp;</span><span class=\"hljs-template-tag\">{% <span class=\"hljs-name\" style=\"color: navy;\"><span class=\"hljs-name\">endblock</span></span> %}</span><br/><br/><span class=\"xml\"> &nbsp; &nbsp;<span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\" style=\"color: teal;\">src</span>=<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">&quot;/public/client.js&quot;</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></code></pre><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\">这样，一个简单的服务端渲染就结束了，限于篇幅，详细的代码请参考&nbsp;Github代码库。</p><blockquote style=\"margin: 1em 0px; border-left: 4px solid rgb(221, 221, 221); padding: 0px 1.3rem; color: rgb(102, 102, 102); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><p style=\"line-height: 2.27rem; margin-top: 0.6rem; margin-bottom: 0.6rem;\">https://github.com/pangz1/vue-ssr</p></blockquote><p style=\"line-height: 2.27rem; color: rgb(51, 51, 51); font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, Arial, &quot;Microsoft YaHei&quot;, &quot;Helvetica Neue&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><br/></p><p><br/></p>","title":"Vue 服务端渲染业务入门实践","time":"2017-10-20","sort":"vue"},{"info":"<h2 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 2.15em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\">名词解释</h2><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">Schema： 一种以文件形式存储的数据库模型骨架，不具备数据库的操作能力</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://mongoosejs.com/docs/models.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(202, 12, 22); text-decoration-line: none; margin: 0px; padding: 0px; outline: none;\">Model</a>： 由Schema编译而成的假想（fancy）构造器，具有抽象属性和行为。Model的每一个实例（instance）就是一个<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">document</code>。<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">document</code>可以保存到数据库和从数据库返回。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><a href=\"http://mongoosejs.com/docs/documents.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(202, 12, 22); text-decoration-line: none; margin: 0px; padding: 0px; outline: none;\">Instance</a>： 由Model创建的实例。</p><h2 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 2.15em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a><a href=\"http://www.runoob.com/mongodb/mongodb-databases-documents-collections.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(202, 12, 22); text-decoration-line: none; margin: 0px; padding: 0px; outline: none;\">概念解析</a></h2><table width=\"860\"><thead style=\"box-sizing: border-box;\"><tr style=\"box-sizing: border-box;\" class=\"firstRow\"><th style=\"box-sizing: border-box; text-align: left; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">SQL术语/概念</th><th align=\"center\" style=\"box-sizing: border-box; text-align: left; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">MongoDB术语/概念</th><th align=\"right\" style=\"box-sizing: border-box; text-align: left; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">解释/说明</th></tr></thead><tbody style=\"box-sizing: border-box;\"><tr style=\"box-sizing: border-box;\"><td style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">database</td><td align=\"center\" style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">database</td><td align=\"right\" style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\"><br/></td></tr><tr style=\"box-sizing: border-box;\"><td style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">table</td><td align=\"center\" style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">collection</td><td align=\"right\" style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">数据库表/集合</td></tr><tr style=\"box-sizing: border-box;\"><td style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">row</td><td align=\"center\" style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">document</td><td align=\"right\" style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">数据记录行/文档</td></tr><tr style=\"box-sizing: border-box;\"><td style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">column</td><td align=\"center\" style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">field</td><td align=\"right\" style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">数据字段/域</td></tr><tr style=\"box-sizing: border-box;\"><td style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">index</td><td align=\"center\" style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">index</td><td align=\"right\" style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">索引</td></tr><tr style=\"box-sizing: border-box;\"><td style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">table joins</td><td align=\"center\" style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\"><br/></td><td align=\"right\" style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">表连接,MongoDB不支持</td></tr><tr style=\"box-sizing: border-box;\"><td style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">primary key</td><td align=\"center\" style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">primary key</td><td align=\"right\" style=\"box-sizing: border-box; padding: 8px; line-height: 20px; vertical-align: top; border-color: rgb(238, 238, 238);\">主键,MongoDB自动将_id字段设置为主键</td></tr></tbody></table><h2 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 2.15em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>定义Schema</h2><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">mongoose中任何任何事物都是从Schema开始的。每一个Schema对应MongoDB中的一个集合（collection）。Schema中定义了集合中文档（document）的样式。</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">var&nbsp;mongoose&nbsp;=&nbsp;require(&#39;mongoose&#39;);var&nbsp;Schema&nbsp;=&nbsp;mongoose.Schema;var&nbsp;blogSchema&nbsp;=&nbsp;new&nbsp;Schema({\n&nbsp;&nbsp;title:&nbsp;&nbsp;String,\n&nbsp;&nbsp;author:&nbsp;String,\n&nbsp;&nbsp;body:&nbsp;&nbsp;&nbsp;String,\n&nbsp;&nbsp;comments:&nbsp;[{&nbsp;body:&nbsp;String,&nbsp;date:&nbsp;Date&nbsp;}],\n&nbsp;&nbsp;date:&nbsp;{&nbsp;type:&nbsp;Date,&nbsp;default:&nbsp;Date.now&nbsp;},\n&nbsp;&nbsp;hidden:&nbsp;Boolean,\n&nbsp;&nbsp;meta:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;votes:&nbsp;Number,\n&nbsp;&nbsp;&nbsp;&nbsp;favs:&nbsp;&nbsp;Number\n&nbsp;&nbsp;}\n});1234567891011121314</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">如果之后想要在Schema中添加键，可以使用<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">Schema#add</code>方法。</p><h2 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 2.15em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>创造一个model</h2><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">为了使用schema定义，我们需要转换<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">blogSchema</code>为一个<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">Model</code>。使用<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">mongoose.model(modelName, schema)</code>。</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">var&nbsp;BlogModel&nbsp;=&nbsp;mongoose.model(&#39;Blog&#39;,&nbsp;blogSchema);//&nbsp;开始吧！12</pre><h2 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 2.15em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>实例方法</h2><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">Model</code>的实例是<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">document</code>。实例有很多内置的方法，我们也可以给实例自定义方法。</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">var&nbsp;animalSchema&nbsp;=&nbsp;new&nbsp;Schema({&nbsp;name:&nbsp;String,&nbsp;type:&nbsp;String&nbsp;});\n\nanimalSchema.methods.findSimilarTypes&nbsp;=&nbsp;function&nbsp;(cb)&nbsp;{\n&nbsp;&nbsp;return&nbsp;this.model(&#39;Animal&#39;).find({&nbsp;type:&nbsp;this.type&nbsp;},&nbsp;cb);\n}12345</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">现在所有的动物实例有<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">findSimilarTypes</code>方法。</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">var&nbsp;AnimalModel&nbsp;=&nbsp;mongoose.model(&#39;Animal&#39;,&nbsp;animalSechema);var&nbsp;dog&nbsp;=&nbsp;new&nbsp;AnimalModel({&nbsp;type:&nbsp;&#39;dog&#39;&nbsp;});\ndog.findSimilarTypes(function&nbsp;(err,&nbsp;dogs)&nbsp;{\n&nbsp;&nbsp;console.log(dogs);&nbsp;//&nbsp;woof});12345</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">重写一个<strong style=\"box-sizing: border-box;\">默认</strong>的实例方法可能会导致不期待的结果。</p><h2 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 2.15em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>Statics</h2><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">给<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">Model</code>添加一个静态方法也是简单的。</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">animalSchema.statics.findByName&nbsp;=&nbsp;function&nbsp;(name,&nbsp;cb)&nbsp;{\n&nbsp;&nbsp;this.find({&nbsp;name:&nbsp;new&nbsp;RegExp(name,&nbsp;&#39;i&#39;)&nbsp;},&nbsp;cb);\n}var&nbsp;AnimalModel&nbsp;=&nbsp;mongoose.model(&#39;Animal&#39;,&nbsp;animalSchema);\nAnimalModel.findByName(&#39;fido&#39;,&nbsp;function&nbsp;(err,&nbsp;animals)&nbsp;{\n&nbsp;&nbsp;console.log(animals);\n});1234567</pre><h3 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 1.7em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>methods和statics的区别</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">区别就是一个给<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">Model</code>添加方法（<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">statics</code>），一个给实例添加方法（<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">methods</code>）。下面是stackOverflow的两个答案。</p><blockquote style=\"box-sizing: border-box; padding: 15px 20px; margin: 0px 0px 1.1em; border-left: 10px solid rgba(128, 128, 128, 0.075); background-color: rgba(128, 128, 128, 0.05); border-radius: 0px 5px 5px 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal;\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; font-size: 1em; line-height: 1.5; color: rgb(111, 111, 111);\"><a href=\"http://stackoverflow.com/questions/23425303/what-is-the-difference-between-methods-and-statics-in-mongoose\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(202, 12, 22); text-decoration-line: none; margin: 0px; padding: 0px; outline: none;\">答案一</a></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: 1em; line-height: 1.5; color: rgb(111, 111, 111);\"><a href=\"http://stackoverflow.com/questions/29664499/mongoose-static-methods-vs-instance-methods\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(202, 12, 22); text-decoration-line: none; margin: 0px; padding: 0px; outline: none;\">答案二</a></p></blockquote><h2 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 2.15em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>索引</h2><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">MongoDB</code>支持二级索引，定义索引有两种方式</p><ul style=\"box-sizing: border-box; padding: 0px; list-style-position: initial; list-style-image: initial; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>路径级别</p></li><li><p>schema级别</p></li></ul><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">var&nbsp;animalSchema&nbsp;=&nbsp;new&nbsp;Schema({\n&nbsp;&nbsp;name:&nbsp;String,\n&nbsp;&nbsp;type:&nbsp;String,\n&nbsp;&nbsp;tags:&nbsp;{&nbsp;type:&nbsp;[String],&nbsp;index:&nbsp;true&nbsp;}&nbsp;//&nbsp;field&nbsp;level});\nanimalSchema.index({&nbsp;name:&nbsp;1,&nbsp;type:&nbsp;-1&nbsp;});&nbsp;//&nbsp;schema&nbsp;level,&nbsp;1是正序，-1是倒序123456</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">如果要建立复合索引的话，在schema级别建立是必要的。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">索引或者复合索引能让搜索更加高效，默认索引就是主键索引ObjectId，属性名为<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">_id</code>。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">数据库中主要的就是CRUD操作，建立索引可以提高查询速度。但是过多的索引会降低CUD操作。深度好文如下</p><blockquote style=\"box-sizing: border-box; padding: 15px 20px; margin: 0px 0px 1.1em; border-left: 10px solid rgba(128, 128, 128, 0.075); background-color: rgba(128, 128, 128, 0.05); border-radius: 0px 5px 5px 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal;\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: 1em; line-height: 1.5; color: rgb(111, 111, 111);\"><a href=\"http://www.cnblogs.com/huangxincheng/archive/2012/02/29/2372699.html\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(202, 12, 22); text-decoration-line: none; margin: 0px; padding: 0px; outline: none;\">http://www.cnblogs.com/huangxincheng/archive/2012/02/29/2372699.html</a></p></blockquote><h2 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 2.15em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>虚拟属性</h2><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\"><code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">Schema</code>中如果定义了虚拟属性，那么该属性将不写入数据库。写入数据库的还是原来的属性。</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">//&nbsp;定义一个schemavar&nbsp;personSchema&nbsp;=&nbsp;new&nbsp;Schema({\n&nbsp;&nbsp;name:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;first:&nbsp;String,\n&nbsp;&nbsp;&nbsp;&nbsp;last:&nbsp;String\n&nbsp;&nbsp;}\n});//&nbsp;编译var&nbsp;Person&nbsp;=&nbsp;mongoose.model(&#39;Person&#39;,&nbsp;personSchema);//&nbsp;创造实例var&nbsp;bad&nbsp;=&nbsp;new&nbsp;Person({\n&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;{&nbsp;first:&nbsp;&#39;Walter&#39;,&nbsp;last:&nbsp;&#39;White&#39;&nbsp;}\n});1234567891011121314</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">我们将名字分成名字和姓，如果要得到全名，我们需要&nbsp;<br/><code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">console.log(bad.name.first + &#39; &#39; + bad.name.last); // Walter White</code></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">这样无疑是麻烦的，我们可以通过虚拟属性的<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">getter</code>来解决这个问题。</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">personSchema.virtual(&#39;name.full&#39;).get(function&nbsp;()&nbsp;{\n&nbsp;&nbsp;return&nbsp;this.name.first&nbsp;+&nbsp;&#39;&nbsp;&#39;&nbsp;+&nbsp;this.name.last;\n});123</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">那么就可以使用<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">bad.name.full</code>直接调用全名了。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">反之，如果我们知道虚拟属性<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">name.full</code>，通过<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">setter</code>也可以得到组成<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">name.full</code>的每一项。</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">personSchema.virtual(&#39;name.full&#39;).set(function&nbsp;(name)&nbsp;{\n&nbsp;&nbsp;var&nbsp;split&nbsp;=&nbsp;name.split(&#39;&nbsp;&#39;);\n&nbsp;&nbsp;this.name.first&nbsp;=&nbsp;split[0];\n&nbsp;&nbsp;this.name.last&nbsp;=&nbsp;split[1];\n});...mad.name.full&nbsp;=&nbsp;&#39;Breaking&nbsp;Bad&#39;;\nconsole.log(mad.name.first);&nbsp;//&nbsp;Breaking\nconsole.log(mad.name.last);&nbsp;&nbsp;//&nbsp;Bad123456789</pre><h2 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 2.15em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>配置项</h2><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">schema有一些配置项可以使用，有两种方式：</p><ul style=\"box-sizing: border-box; padding: 0px; list-style-position: initial; list-style-image: initial; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px;\"><code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">new Schema({...}, options)</code></p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">var&nbsp;schema&nbsp;=&nbsp;new&nbsp;Schema({...});\nschema.set(option,&nbsp;value);</pre></li><ul class=\"pre-numbering list-paddingleft-2\" style=\"list-style-type: none;\"><li><p>1</p></li><li><p>2</p></li></ul></ul><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">有效的配置有:</p><ul style=\"box-sizing: border-box; padding: 0px; list-style-position: initial; list-style-image: initial; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>autoIndex（默认true）</p></li><li><p>capped</p></li><li><p>collection</p></li><li><p>id</p></li><li><p>_id（默认true）</p></li><li><p>read</p></li><li><p>safe（默认true）</p></li><li><p>shardKey</p></li><li><p>strict（默认true）</p></li><li><p>toJSON</p></li><li><p>toObject</p></li><li><p>versionKey</p></li><li><p>typeKey</p></li><li><p>validateBeforeSave</p></li><li><p>skipVersioning</p></li><li><p>timestamps</p></li><li><p>useNestedStrict</p></li><li><p>retainKeyOrder</p></li></ul><h3 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 1.7em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>autoIndex–自动索引</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">应用开始的时候，Mongoose对每一个索引发送一个<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">ensureIndex</code>的命令。索引默认（<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">_id</code>）被Mongoose创建。当我们不需要设置索引的时候，就可以通过设置这个选项。</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">var&nbsp;schema&nbsp;=&nbsp;new&nbsp;Schema({..},&nbsp;{&nbsp;autoIndex:&nbsp;false&nbsp;});var&nbsp;Clock&nbsp;=&nbsp;mongoose.model(&#39;Clock&#39;,&nbsp;schema);\nClock.ensureIndexes(callback);123</pre><h3 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 1.7em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>bufferCommands</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">似乎是说这个（mongoose buffer）管理在mongoose连接关闭的时候重连，如果取消buffer设置，如下：（存疑）</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">var&nbsp;schema&nbsp;=&nbsp;new&nbsp;Schema({..},&nbsp;{&nbsp;bufferCommands:&nbsp;false&nbsp;});1</pre><h3 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 1.7em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>capped–上限设置</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">如果有数据库的批量操作，该属性能限制一次操作的量，例如：</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">new&nbsp;Schema({...},{capped:1024});&nbsp;&nbsp;//一次操作上线1024条数据1</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">当然该参数也可是对象，包含size、max、autiIndexId属性</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">new&nbsp;Schema({...},{capped:{size:1024,max:100,autoIndexId:true}});1</pre><h3 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 1.7em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>collection–集合名字</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">在MongDB中默认使用Model的名字作为集合的名字，如过需要自定义集合的名字，可以通过设置这个选项。</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">var&nbsp;schema&nbsp;=&nbsp;new&nbsp;Schema({...},&nbsp;{collection:&nbsp;&#39;yourName&#39;});1</pre><h3 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 1.7em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>id</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">mongoose分配给每一个schema一个虚拟属性id，它是一个getter。返回的是_id转换为字符串后的值。如果不需要为schema添加这个getter，可以通过id配置修改。</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">//&nbsp;默认行为var&nbsp;pageSchema&nbsp;=&nbsp;new&nbsp;Schema({&nbsp;name:&nbsp;String&nbsp;});var&nbsp;pageModel&nbsp;=&nbsp;mongoose.model(&#39;Page&#39;,&nbsp;pageSchema);var&nbsp;p&nbsp;=&nbsp;new&nbsp;pageModel({&nbsp;name:&nbsp;&#39;mongodb.org&#39;&nbsp;});\nconsole.log(p.id);&nbsp;//&nbsp;&#39;50341373e894ad16347efe01&#39;//&nbsp;禁止idvar&nbsp;pageSchema&nbsp;=&nbsp;new&nbsp;Schema({&nbsp;name:&nbsp;String&nbsp;},&nbsp;{&nbsp;id:&nbsp;false&nbsp;}&nbsp;);var&nbsp;pageModel&nbsp;=&nbsp;mongoose.model(&#39;Page&#39;,&nbsp;pageSchema);var&nbsp;p&nbsp;=&nbsp;new&nbsp;pageModel({&nbsp;name:&nbsp;&#39;mongodb.org&#39;&nbsp;});\nconsole.log(p.id);&nbsp;//&nbsp;undefined1234567891011</pre><h3 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 1.7em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>_id</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">在一个schema中如果没有定义<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">_id</code>域（field），那么mongoose将会默认分配一个<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">_id</code>域（field）。类型是<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">ObjectId</code>。如果不需要使用这个默认的选择，可以通过设置这个选项。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">通过在schema中设置这个字段可以阻止生成mongoose获得_id。但是在插入的时候仍然会生成<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">_id</code>。设置这个字段之后，如果再使用<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">Schema.set(&#39;_id&#39;, false)</code>将无效。</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">//&nbsp;默认行为var&nbsp;pageSchema&nbsp;=&nbsp;new&nbsp;Schema({&nbsp;name:&nbsp;String&nbsp;});var&nbsp;pageModel&nbsp;=&nbsp;mongoose.model(&#39;Page&#39;,&nbsp;pageSchema);var&nbsp;p&nbsp;=&nbsp;new&nbsp;pageModel({&nbsp;name:&nbsp;&#39;mongodb.org&#39;&nbsp;});\nconsole.log(p);&nbsp;//&nbsp;{&nbsp;_id:&nbsp;&#39;50341373e894ad16347efe01&#39;,&nbsp;name:&nbsp;&#39;mongodb.org&#39;&nbsp;}//&nbsp;禁用&nbsp;_idvar&nbsp;pageSchema&nbsp;=&nbsp;new&nbsp;Schema({&nbsp;name:&nbsp;String&nbsp;},&nbsp;{&nbsp;_id:&nbsp;false&nbsp;});//&nbsp;schema构造器设置之后，不要再像下面这样设置//&nbsp;var&nbsp;schema&nbsp;=&nbsp;new&nbsp;Schema({&nbsp;name:&nbsp;String&nbsp;});//&nbsp;schema.set(&#39;_id&#39;,&nbsp;false);var&nbsp;PageModel&nbsp;=&nbsp;mongoose.model(&#39;Page&#39;,&nbsp;pageSchema);var&nbsp;p&nbsp;=&nbsp;new&nbsp;pageModel({&nbsp;name:&nbsp;&#39;mongodb.org&#39;&nbsp;});\nconsole.log(p);&nbsp;//&nbsp;{&nbsp;name:&nbsp;&#39;mongodb.org&#39;&nbsp;}//&nbsp;当插入的时候，MongoDB将会创建_idp.save(function&nbsp;(err)&nbsp;{\n&nbsp;&nbsp;if&nbsp;(err)&nbsp;return&nbsp;handleError(err);\n&nbsp;&nbsp;pageModel.findById(p,&nbsp;function&nbsp;(err,&nbsp;doc)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(err)&nbsp;return&nbsp;handleError(err);\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(doc);&nbsp;//&nbsp;{&nbsp;name:&nbsp;&#39;mongodb.org&#39;,&nbsp;_id:&nbsp;&#39;50341373e894ad16347efe12&#39;&nbsp;}\n&nbsp;&nbsp;})\n})123456789101112131415161718192021222324</pre><blockquote style=\"box-sizing: border-box; padding: 15px 20px; margin: 0px 0px 1.1em; border-left: 10px solid rgba(128, 128, 128, 0.075); background-color: rgba(128, 128, 128, 0.05); border-radius: 0px 5px 5px 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal;\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: 1em; line-height: 1.5; color: rgb(111, 111, 111);\"><a href=\"https://github.com/Automattic/mongoose/issues/1512\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(202, 12, 22); text-decoration-line: none; margin: 0px; padding: 0px; outline: none;\">为什么不建议使用set</a></p></blockquote><h3 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 1.7em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>read</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">允许在schema级别设置<a href=\"http://mongoosejs.com/docs/api.html#query_Query-read\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(202, 12, 22); text-decoration-line: none; margin: 0px; padding: 0px; outline: none;\">query#read</a>，对于所有的查询，提供给我们一种方法应用默认的<a href=\"https://docs.mongodb.com/manual/applications/replication/#replica-set-read-preference\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(202, 12, 22); text-decoration-line: none; margin: 0px; padding: 0px; outline: none;\">ReadPreferences</a>。</p><h3 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 1.7em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>safe</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">这个配置会在MongoDB所有的操作中起作用。如果设置成true就是在操作的时候要等待返回的MongoDB返回的结果，比如update，要返回影响的条数，才往后执行，如果safe：false，则表示不用等到结果就向后执行了。&nbsp;<br/>默认设置为true能保证所有的错误能通过我们写的回调函数。我们也能设置其它的安全等级如：</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">{&nbsp;j:&nbsp;1,&nbsp;w:&nbsp;2,&nbsp;wtimeout:&nbsp;10000&nbsp;}1</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">表示如果10秒内写操作没有完成，将会超时。&nbsp;<br/>关于j和w，这里有很好的解释。</p><blockquote style=\"box-sizing: border-box; padding: 15px 20px; margin: 0px 0px 1.1em; border-left: 10px solid rgba(128, 128, 128, 0.075); background-color: rgba(128, 128, 128, 0.05); border-radius: 0px 5px 5px 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal;\"><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; padding: 0px; font-size: 1em; line-height: 1.5; color: rgb(111, 111, 111);\"><a href=\"http://kyfxbl.iteye.com/blog/1952941\" target=\"_blank\" style=\"box-sizing: border-box; background: transparent; color: rgb(202, 12, 22); text-decoration-line: none; margin: 0px; padding: 0px; outline: none;\">http://kyfxbl.iteye.com/blog/1952941</a></p></blockquote><h3 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 1.7em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>shardKey</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">需要mongodb做分布式，才会使用该属性。</p><h3 style=\"box-sizing: border-box; font-family: &quot;microsoft yahei&quot;; font-weight: 100; line-height: 1.1; color: rgb(63, 63, 63); margin: 0.8em 0px; font-size: 1.7em; padding: 0px; white-space: normal; background-color: rgb(255, 255, 255);\"><a style=\"box-sizing: border-box; background: transparent; color: rgb(79, 161, 219); margin: 0px; padding: 0px; outline: none;\"></a>strict</h3><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">默认是enabled，如果实例中的域（field）在schema中不存在，那么这个域不会被插入到数据库。</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">var&nbsp;ThingSchema&nbsp;=&nbsp;new&nbsp;Schema({a:String});var&nbsp;ThingModel&nbsp;=&nbsp;db.model(&#39;Thing&#39;,SchemaSchema);var&nbsp;thing&nbsp;=&nbsp;new&nbsp;Thing({iAmNotInTheThingSchema:true});\nthing.save();//iAmNotInTheThingSchema这个属性将无法被存储1234</pre><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">//&nbsp;通过doc.set()设置也会受到影响。var&nbsp;thingSchema&nbsp;=&nbsp;new&nbsp;Schema({..})var&nbsp;Thing&nbsp;=&nbsp;mongoose.model(&#39;Thing&#39;,&nbsp;thingSchema);var&nbsp;thing&nbsp;=&nbsp;new&nbsp;Thing;\nthing.set(&#39;iAmNotInTheSchema&#39;,&nbsp;true);\nthing.save();&nbsp;//&nbsp;iAmNotInTheSchema&nbsp;is&nbsp;not&nbsp;saved&nbsp;to&nbsp;the&nbsp;db123456</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">如果取消严格选项，iAmNotInTheThingSchema将会被存入数据库</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">var&nbsp;thingSchema&nbsp;=&nbsp;new&nbsp;Schema({..},&nbsp;{&nbsp;strict:&nbsp;false&nbsp;});var&nbsp;thing&nbsp;=&nbsp;new&nbsp;Thing({&nbsp;iAmNotInTheSchema:&nbsp;true&nbsp;});\nthing.save();&nbsp;//&nbsp;iAmNotInTheSchema&nbsp;is&nbsp;now&nbsp;saved&nbsp;to&nbsp;the&nbsp;db!!123</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">该选项也可以在Model级别使用，通过设置第二个参数，例如：</p><pre class=\"prettyprint\" style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 14px; white-space: nowrap; padding: 5px 5px 5px 60px; margin-top: 0px; margin-bottom: 1.1em; line-height: 1.45; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; background-color: rgba(128, 128, 128, 0.05); border: 1px solid rgba(128, 128, 128, 0.075); border-radius: 0px; position: relative; overflow-y: hidden; overflow-x: auto;\">var&nbsp;ThingModel&nbsp;=&nbsp;db.model(&#39;Thing&#39;);var&nbsp;thing1&nbsp;=&nbsp;new&nbsp;ThingModel(doc,true);&nbsp;&nbsp;//启用严格var&nbsp;thing2&nbsp;=&nbsp;new&nbsp;ThingModel(doc,false);&nbsp;//禁用严格123</pre><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">strict也可以设置为<code style=\"box-sizing: border-box; font-family: &quot;Source Code Pro&quot;, monospace; font-size: 13.5px; padding: 2px 4px; white-space: nowrap; background-color: rgba(128, 128, 128, 0.075); border-radius: 0px;\">throw</code>，表示出现问题将会抛出错误而不是抛弃不合适的数据。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 1.1em; padding: 0px; color: rgb(63, 63, 63); font-family: &quot;microsoft yahei&quot;; font-size: 15px; white-space: normal; background-color: rgb(255, 255, 255);\">注</p>","title":"mongoose学习笔记一","time":"2017-10-20","sort":"node"}
]